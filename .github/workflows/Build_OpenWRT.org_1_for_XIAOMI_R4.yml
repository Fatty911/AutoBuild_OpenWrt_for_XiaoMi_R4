name: Build OpenWRT.org 1 before transplant for XIAOMI_R4

on:
  repository_dispatch:
    types: Openwrt.org Source Code Update
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: true
        default: false
  push:
    branches: 
      - master
      - main
    paths:
      - .github/workflows/Build_OpenWRT.org_1_for_XIAOMI_R4.yml

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_OpenWrt_org
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  SOURCE: OpenWrt.org_official

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 10240
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
            
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* 
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list || true
          sudo -E apt-get -qq update
          sudo apt install software-properties-common -y || true
          sudo add-apt-repository universe || true
          sudo add-apt-repository multiverse || true
          sudo apt update
          sudo apt install -y perl build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-distutils rsync bc wget ccache flex bison libelf-dev || sudo apt install -y flex bison libelf-dev build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-venv python3-pip rsync bc wget ccache perl || sudo apt policy build-essential git gettext subversion ccache python3-distutils
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir/openwrt
          sudo apt install -y jq parallel python3-pip pigz
          pip install mega.py || pip3 install mega.py || exit 1
          
      - name: Clone source code
        working-directory: ${{ github.workspace }}
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds and Install feeds
        run: |
          cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a
          echo "移除相关组件对trojan-plus的依赖"
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              feeds/passwall/luci-app-passwall/Makefile || true
          
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              package/feeds/passwall/luci-app-passwall/Makefile || true
              
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              feeds/small8/luci-app-passwall/Makefile || true
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              package/feeds/small8/luci-app-passwall/Makefile || true
          echo "彻底移除 trojan-plus 包"
          rm -rf feeds/small8/trojan-plus
          rm -rf package/feeds/small8/trojan-plus # 确保两个位置都删除

      
          
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "Before defconfig, setting CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config
          make defconfig
          echo "After defconfig, checking CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Lost after defconfig, reapplying..." && echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config)
          echo "Final check after reapplication:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config
          
      - name: Checking files After diy-part2.sh
        run: |
          cd openwrt
          echo "After diy-part2.sh, checking .config:"
          #grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Not found, exit" && exit 1)
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "Not found, exit But continuing..."
          echo "ls -la查看目录"
          ls -la
          
      - name: Download package
        id: download_package
        run: |
          cd openwrt
          make download -j2
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check space usage after download
        if: (!cancelled())
        run: df -hT
        

      - name: Compile tools
        id: compile_tools
        run: |
          cd openwrt
          make tools/install -j$(nproc) V=s > tools.log 2>&1 || make tools/install -j1 V=s > tools.log 2>&1


      - name: Compile toolchain
        id: compile_toolchain
        run: |
          cd openwrt
          make toolchain/install -j$(nproc) V=s > toolchain.log 2>&1 || make toolchain/install -j1 V=s > toolchain.log 2>&1


      - name: Compile kernel
        id: compile_kernel
        run: |
          cd openwrt
          make target/linux/compile -j$(nproc) V=s > kernel.log 2>&1 || make target/linux/compile -j1 V=s > kernel.log 2>&1

      
      - name: Compile packages by feeds
        id: compile_feeds
        run: |
          cd openwrt
          # 逐行读取 feeds.conf.default 并编译
          while IFS= read -r line; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            FEED=$(echo "$line" | awk '{print $2}')
            echo "处理 feed: $FEED 于 $(date)"
            # 提取该 feed 下的软件包
            PACKAGES=$(ls package/feeds/$FEED 2>/dev/null | grep -v Makefile || true)
            if [ -z "$PACKAGES" ]; then
              echo "警告: $FEED 下没有找到软件包，跳过"
              continue
            fi
            for pkg in $PACKAGES; do
              echo "编译软件包: $pkg 于 $(date)"
              { make package/$pkg/compile V=s > packages.log 2>&1 || make package/$pkg/compile -j1 V=s > packages.log 2>&1;} || {
                retry_count=$((retry_count + 1))
                echo "尝试第 $retry_count 次修复..."
                if grep -q "PKG_VERSION.*error" packages.log; then
                  echo "Fixing PKG_VERSION formats..."
                  find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                    if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                      echo "Found target in $makefile"
                      sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile" || exit 1
                      echo "已修改$makefile:"
                      grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                    fi
                  done
                elif grep -q "DEPENDS.*error" packages.log; then
                  echo "Fixing dependency duplicates..."
                  find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                    makefile="$1"
                    awk '\''BEGIN { FS = "[[:space:]]+" }
                    /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                        split($0, deps, " ")
                        seen_versioned = ""
                        seen_bare = ""
                        result = $1
                        for (i = 2; i <= length(deps); i++) {
                            dep = deps[i]
                            if (dep ~ /\$\(/) {
                                result = result " " dep
                            }
                        }
                        print result
                    }'\'' "$makefile" > "$makefile.tmp" && mv "$makefile.tmp" "$makefile"
                  ' sh {} \;
                fi
              }
            done
            echo "Feed $FEED 编译完成 于 $(date)"
          done < feeds.conf.default
          
      - name: List main packages
        run: |
          cd openwrt
          # Find directories with Makefiles, excluding package/feeds/
          find package/ -type d -name src -prune -o -type f -name Makefile -not -path 'package/feeds/*' -exec dirname {} \; > main_packages.txt
          echo "Main packages to compile:"
          cat main_packages.txt
      
      - name: Compile main packages
        id: main_packages
        run: |
          cd openwrt
          while read -r pkg; do
            echo "编译 $pkg at $(date)"
            # Compile each package individually, redirect output to a log file
            { make $pkg/compile V=s > "$pkg.log" 2>&1 || make $pkg/compile -j1 V=s > "$pkg.log" 2>&1;} || {
              echo "编译 $pkg 失败，查看编译此包时的日志"
              cat "$pkg.log"
              }
          done < main_packages.txt
      
          
      - name: 查看日志结尾300行
        if: always()
        run: |
          cd openwrt
          if [ "${{ steps.compile_tools.outcome }}" = "failure" ]; then             
            echo "Compile tools failed. Showing last 300 lines of tools.log:"             
            tail -300 tools.log           
          elif [ "${{ steps.compile_toolchain.outcome }}" = "failure" ]; then             
            echo "Compile toolchain failed. Showing last 300 lines of toolchain.log:"             
            tail -300 toolchain.log           
          elif [ "${{ steps.compile_kernel.outcome }}" = "failure" ]; then             
            echo "Compile kernel failed. Showing last 300 lines of kernel.log:"             
            tail -300 kernel.log           
          elif [ "${{ steps.main_packages.outcome }}" = "failure" ]; then             
            echo "Compile feeds failed. Showing last 300 lines of packages.log:"             
            echo "去上一步查看报错"
          else             
            echo "All steps completed successfully. No log to show."           
          fi 
          
     
      - name: 归档
        run: |
          echo "压缩前先看一下目录结构"
          ls -la openwrt
          # tar -cf - openwrt | pigz > ${{ env.SOURCE }}.tar.gz
          tar -czf ${{ env.SOURCE }}.tar.gz openwrt 
          

      - name: Upload to MEGA
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}  # 从 Secrets 中获取用户名
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}  # 从 Secrets 中获取密码
        run: |
          python upload_to_MEGA.py
         
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2

