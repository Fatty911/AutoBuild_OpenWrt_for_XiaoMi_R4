name: Build OpenWRT.org 1 before transplant for XIAOMI_R4

on:
  repository_dispatch:
    types: Openwrt.org Source Code Update
  workflow_dispatch:
  push:
    branches: 
      - master

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_OpenWrt_org
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 10240
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
            
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* 
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list || true
          sudo -E apt-get -qq update
          sudo apt install software-properties-common -y || true
          sudo add-apt-repository universe || true
          sudo add-apt-repository multiverse || true
          sudo apt update
          sudo apt install -y perl build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-distutils rsync bc wget ccache flex bison libelf-dev || sudo apt install -y flex bison libelf-dev build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-venv python3-pip rsync bc wget ccache perl || sudo apt policy build-essential git gettext subversion ccache python3-distutils
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir/openwrt
          sudo apt install -y cpulimit 
          cpulimit -e tar -l 80
          cpulimit -e make -l 80
          cpulimit -e ls -l 80
      - name: Clone source code
        working-directory: ${{ github.workspace }}
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds and Install feeds
        run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

      
          
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "Before defconfig, setting CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config
          make defconfig
          echo "After defconfig, checking CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Lost after defconfig, reapplying..." && echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config)
          echo "Final check after reapplication:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config
      - name: Checking .config After diy-part2.sh
        run: |
          cd openwrt
          echo "After diy-part2.sh, checking .config:"
          #grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Not found, exit" && exit 1)
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "Not found, exit But continuing..."
          
      - name: Download package
        id: package
        run: |
          cd openwrt
          #make defconfig
          make download -j2
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check space usage after download
        if: (!cancelled())
        run: df -hT
        

      - name: Compile tools
        run: |
          cd openwrt
          make tools/install -j$(nproc) V=s > tools.log 2>&1 || make tools/install -j1 V=s > tools.log 2>&1
          if [ $? -ne 0 ]; then
            echo "Tools compilation failed"
            exit 1
          fi

      - name: Compile toolchain
        run: |
          cd openwrt
          make toolchain/install -j$(nproc) V=s > toolchain.log 2>&1 || make toolchain/install -j1 V=s > toolchain.log 2>&1
          if [ $? -ne 0 ]; then
            echo "Toolchain compilation failed"
            exit 1
          fi

      - name: Compile kernel
        run: |
          cd openwrt
          make target/linux/compile -j$(nproc) V=s > kernel.log 2>&1 || make target/linux/compile -j1 V=s > kernel.log 2>&1
          if [ $? -ne 0 ]; then
            echo "Kernel compilation failed"
            exit 1
          fi

      - name: Compile packages
        id: compile_packages
        run: |
          cd openwrt
          echo "开始尝试编译packages " && {
            MAX_RETRY=6
            retry_count=0
            while [ $retry_count -lt $MAX_RETRY ]; do
                make -j2 package/compile V=s > packages.log 2>&1 && break
                if grep -q "po2lmo: command not found" packages.log; then
                            echo "检测到 po2lmo 缺失，正在优先编译 luci-base..."
                            make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s
                            echo "重新尝试编译主组件..."
                            make -j$(nproc) package/compile V=s || make -j1 package/compile V=s
                elif grep -q "PKG_VERSION" packages.log; then
                              echo "Fixing PKG_VERSION formats..."
                              find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                                if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                                  echo "Found target in $makefile"
                                  sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                                  echo "Modified $makefile:"
                                  grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                                fi
                              done
                            # 检查依赖项重复错误
                elif grep -q "DEPENDS" packages.log; then
                                      echo "Fixing dependency duplicates..."
                                      find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                                        makefile="$1"
                                        awk '\''BEGIN { FS = "[[:space:]]+" }
                                        /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                            split($0, deps, " ")
                                            seen_versioned = ""
                                            seen_bare = ""
                                            result = $1
                                            for (i = 2; i <= length(deps); i++) {
                                                dep = deps[i]
                                                pos = index(dep, ">=")
                                                if (pos > 0) {
                                                    bare = substr(dep, 2, pos-2)
                                                } else {
                                                    bare = substr(dep, 2)
                                                }
                                                if (match(dep, />=/)) {
                                                    if (seen_versioned !~ bare) {
                                                        result = result " " dep
                                                        seen_versioned = seen_versioned " " bare
                                                        gsub(" *" bare " *", " ", seen_bare)
                                                    }
                                                } else {
                                                    if (seen_versioned !~ bare && seen_bare !~ bare) {
                                                        result = result " " dep
                                                        seen_bare = seen_bare " " bare
                                                    }
                                                }
                                            }
                                            print result
                                            next
                                        }
                                        { print }
                                        '\'' "$makefile" > "$makefile.tmp"
                                        if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                                          echo "Modified $makefile:"
                                          grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                                          mv "$makefile.tmp" "$makefile"
                                        else
                                          rm -f "$makefile.tmp"
                                        fi
                                      ' _ {} \;
                elif grep -q "dependency format is invalid" packages.log; then
                                  echo "处理依赖格式错误..."
                                  find . -type f $ -name "Makefile" -o -name "*.mk" $ -exec sh -c '
                                    makefile="$1"
                                    # 修复版本号中的连字符问题并去重
                                    awk -i inplace '\''
                                      BEGIN { FS="[[:space:]]+"; OFS=" " }
                                      /^(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                        delete seen
                                        split($0, parts, "=")
                                        split(parts[2], deps, " ")
                                        new_deps = ""
                                        for (i in deps) {
                                          dep = deps[i]
                                          #gsub(/(>=|<=|>)(\d+\.\d+\.\d+)-(\d+)/, "\\1\\2_\\3", dep)
                                          gsub(/(>=|<=|>)(\d+\.\d+\.\d+)-\d+/, "\\1\\2", $0)
                                          # 去重
                                          if (!seen[dep]++) {
                                            new_deps = new_deps " " dep
                                          }
                                        }
                                        $0 = parts[1] "=" new_deps
                                      }
                                      { print }
                                    '\'' "$makefile"
                                  ' _ {} \;
                                  echo "Fixing PKG_VERSION formats..."
                                      find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                                        if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                                          echo "Found target in $makefile"
                                          sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                                          echo "Modified $makefile:"
                                          grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                                        fi
                                      done
                                  echo "Fixing dependency duplicates..."
                                      find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                                        makefile="$1"
                                        awk '\''BEGIN { FS = "[[:space:]]+" }
                                        /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                            split($0, deps, " ")
                                            seen_versioned = ""
                                            seen_bare = ""
                                            result = $1
                                            for (i = 2; i <= length(deps); i++) {
                                                dep = deps[i]
                                                pos = index(dep, ">=")
                                                if (pos > 0) {
                                                    bare = substr(dep, 2, pos-2)
                                                } else {
                                                    bare = substr(dep, 2)
                                                }
                                                if (match(dep, />=/)) {
                                                    if (seen_versioned !~ bare) {
                                                        result = result " " dep
                                                        seen_versioned = seen_versioned " " bare
                                                        gsub(" *" bare " *", " ", seen_bare)
                                                    }
                                                } else {
                                                    if (seen_versioned !~ bare && seen_bare !~ bare) {
                                                        result = result " " dep
                                                        seen_bare = seen_bare " " bare
                                                    }
                                                }
                                            }
                                            print result
                                            next
                                        }
                                        { print }
                                        '\'' "$makefile" > "$makefile.tmp"
                                        if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                                          echo "Modified $makefile:"
                                          grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                                          mv "$makefile.tmp" "$makefile"
                                        else
                                          rm -f "$makefile.tmp"
                                        fi
                                      ' _ {} \;
                elif grep -q "mkdir: cannot create directory.*File exists" packages.log; then
                        echo "检测到构建目录冲突错误，尝试修复..."
                        # Use sed to extract the directory path between "directory" and ": File exists"
                        FAILED_DIR=$(grep "mkdir: cannot create directory.*File exists" packages.log | tail -n1 | sed -n 's/.*cannot create directory[[:space:]]*\([^:]*\):.*/\1/p' | tr -d "'")
                        if [ -n "$FAILED_DIR" ] && [ -d "$FAILED_DIR" ]; then
                            echo "正在清理冲突目录: $FAILED_DIR"
                            rm -rf "$FAILED_DIR"
                            # Verify cleanup
                            if [ -d "$FAILED_DIR" ]; then
                                echo "清理 $FAILED_DIR 失败，请检查权限或路径"
                                exit 1
                            fi
                            # Try to infer package name and recompile
                            PKG_PATH=$(echo "$FAILED_DIR" | grep -oE 'package/feeds/[^/]+/[^/]+')
                            if [ -n "$PKG_PATH" ]; then
                                PKG_NAME=$(basename "$PKG_PATH")
                                echo "重新编译包: $PKG_NAME"
                                make -j$(nproc) "$PKG_PATH/compile" V=s || make -j1 "$PKG_PATH/compile" V=s
                            else
                                echo "无法推断包名，尝试重新编译所有包"
                                make -j$(nproc) package/compile V=s || make -j1 package/compile V=s
                            fi
                        else
                            echo "无法提取有效的失败路径或路径不是目录: $FAILED_DIR"
                            echo "尝试重新编译所有包"
                            make -j$(nproc) package/compile V=s || make -j1 package/compile V=s
                        fi
                else
                                # 截取从倒数第三个"Entering directory"到末尾的日志
                                LOG_TAIL=$(tac packages.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
                                [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 packages.log)  # 保底截取最后100行
                                echo "编译错误日志摘要："
                                echo "$LOG_TAIL"
                                exit 1
                fi     
                retry_count=$((retry_count + 1))
                echo "尝试第 $retry_count 次修复..."
            done 
          }

      
      - name: Build image
        run: |
          cd openwrt
          LOG_FILE="image.log"
          (make -j$(nproc) V=s > image.log 2>&1 || make -j1 V=s > image.log 2>&1) || {
                tee "$LOG_FILE" || {
                          # 错误处理：动态截取倒数第二个 Entering directory 到错误行
                          echo "=== 错误块截取（倒数第二个目录入口到错误行） ==="
                          
                          # 步骤1：倒序日志并定位关键行
                          tac "$LOG_FILE" | awk '
                              BEGIN { entry_count=0; error_found=0 }
                              /Entering directory/ && !error_found { 
                                  entry_count++
                                  if (entry_count == 2) {  # 倒数第二个Entering directory
                                      print "----- 错误触发目录入口 -----"
                                      print $0
                                      print "============================="
                                      error_found=1
                                      next
                                  }
                              }
                              error_found { 
                                  # 反转回正序前缓存内容
                                  buffer = $0 "\n" buffer
                                  if ($0 ~ /error|failed/) { exit }
                              }
                              END { print buffer }
                          ' | tac  # 恢复正序输出
                          exit 1
                      }
              }

      - name: Check for .bin file after initial compilation
        id: check_bin_initial
        run: |
          if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
            echo "BIN_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "BIN_EXISTS=false" >> $GITHUB_OUTPUT
            if [ -d "openwrt/bin/targets" ]; then
              tree openwrt/bin/targets/
            else
              echo "Directory openwrt/bin/targets/ does not exist."
            fi
          fi
          
      - name: List directory contents before upload
        run: |
          ls -lR openwrt
          tar -c openwrt
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: org-1st-build
          path: |
            openwrt.tar

