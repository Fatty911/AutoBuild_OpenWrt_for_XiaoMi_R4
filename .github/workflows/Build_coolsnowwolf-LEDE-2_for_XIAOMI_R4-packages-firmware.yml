name: Build coolsnowwolf-LEDE 2 Packages and Firmware for XIAOMI_R4

on:
  workflow_dispatch:
    # inputs:
    #   ssh:
    #     description: 'SSH connection to Actions'
    #     required: false
    #     default: 'false'
  workflow_run:
    workflows: ["Build coolsnowwolf-LEDE 1 Toolchain and Kernel for XIAOMI_R4"]  # 工作流 1 的名称
    types:
      - completed  # 当工作流 1 完成时触发

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_coolsnowwolf
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  ACTIONS_STEP_DEBUG: true

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install libpam0g-dev liblzma-dev libsnmp-dev gcc g++ build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch flex bison make autoconf texinfo unzip sharutils subversion ncurses-term zlib1g-dev ccache upx lib32gcc-s1 libc6-dev-i386 uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev libglib2.0-dev xmlto qemu-utils automake libtool
          sudo -E apt-get -qq install libcrypto++-dev qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qtbase5-private-dev libqt5sql5 libqt5sql5-mysql libqt5sql5-odbc libqt5sql5-psql libqt5sql5-sqlite libqt5sql5-tds qttools5-dev-tools
          UBUNTU_VERSION=$(lsb_release -rs)
          if [[ $UBUNTU_VERSION == 20.04 ]]; then
              sudo apt-get -y install lib32gcc1
          elif [[ $UBUNTU_VERSION == 22.04 ]]; then
              sudo apt-get -y install lib32gcc-s1
          else
              sudo apt-get -y install lib32gcc-s1
              echo "非Ubuntu20.04或22.04系统，安装lib32gcc可能失败，如果失败请检查对应系统安装libgcc32的命令"
          fi
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE

      - name: Download kernel artifacts
        # uses: actions/download-artifact@master
        uses: actions/download-artifact@v4
        with:
          name: coolsnowwolf-first-build
          path: openwrt
          run-id: ${{ github.event.workflow_run.id }}
          # github-token: ${{ secrets.ACTIONS_TRIGGER_PAT }}

      - name: Compile Luci-base and Batman-adv
        id: compile_batman_1
        run: |
          cd openwrt
          make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s
          make -j1 V=s package/feeds/routing/batman-adv/compile > batman-adv.log 2>&1 || {
            echo "编译batman-adv失败，查看日志报错ERROR之前的Entering Directory到Error处"
            LOG_TAIL=$(tac batman-adv.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
            [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 batman-adv.log)
            echo "编译错误日志摘要："
            echo "$LOG_TAIL"
            exit 1
          }

      - name: Compile packages
        id: compile_packages
        run: |
          cd openwrt
          make -j1 package/compile V=s > packages.log 2>&1 || {
            LOG_TAIL=$(tac packages.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
            [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 packages.log)
            echo "编译错误日志摘要："
            echo "$LOG_TAIL"
            exit 1
          }

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) V=s || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')
          echo "TARGET_BOARD=$TARGET_BOARD" >> $GITHUB_ENV
          TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')
          echo "TARGET_SUBTARGET=$TARGET_SUBTARGET" >> $GITHUB_ENV
          TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')
          echo "TARGET_PROFILE=$TARGET_PROFILE" >> $GITHUB_ENV
          echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
          KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: Rename
        id: rename
        if: steps.compile.conclusion == 'success'
        run: |
          cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          for file in openwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.TARGET_PROFILE}}-*; do
            if [ -f "$file" ]; then
              new_file="openwrt_coolsnowwolf_${{ env.TARGET_BOARD }}_${{ env.TARGET_SUBTARGET }}_${{ env.TARGET_PROFILE}}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}${file#*${{ env.TARGET_PROFILE}}}"
              mv "$file" "$new_file"
              echo "Renamed $file to $new_file"
            fi
          done

      - name: Check space usage after compile
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@master
        if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_LEDE_coolsnowwolf_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: |
            openwrt/bin
            openwrt/.config

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "firmware_path=$(pwd)" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_LEDE_coolsnowwolf_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: ${{ env.firmware_path }}

      - name: Check for .bin files
        id: check_bin
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          echo "Check File Sizes..."
          ls -lh ${{ env.firmware_path }}/*
          if ! ls ${{ env.firmware_path }}/*.bin 1> /dev/null 2>&1; then
            echo "No .bin files found in firmware_path. Stopping workflow."
            exit 1
          fi

      - name: Generate release tag
        id: generate_release_tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.check_bin.conclusion == 'success'
        run: |
          echo "release_tag=${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "release_tag_status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.generate_release_tag.outputs.release_tag_status == 'success' && env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          files: |
            ${{ env.firmware_path }}/*
          name: OpenWRT_LEDE_coolsnowwolf_${{ steps.generate_release_tag.outputs.release_tag }}
          tag_name: OpenWRT_LEDE_coolsnowwolf_${{ steps.generate_release_tag.outputs.release_tag }}
