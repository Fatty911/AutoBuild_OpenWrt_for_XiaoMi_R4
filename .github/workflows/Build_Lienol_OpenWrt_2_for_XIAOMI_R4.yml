#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Lienol 2 packages and fixes for XIAOMI_R4

on:
  repository_dispatch:
    types: Lienol Source Code Update
  workflow_run:
    workflows: ["Build Lienol 1 Tools and Kernel before packages for XIAOMI_R4"]  # 工作流 1 的名称
    types:
      - completed  # 当工作流 1 完成时触发
  workflow_dispatch:
  push:
    branches: 
      - master
      - main
    paths:
      - .github/workflows/Build_Lienol_OpenWrt_2_for_XIAOMI_R4.yml

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_Lienol
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  SOURCE: Lienol

jobs:
  build:    
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    steps:    
    
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
          root-reserve-mb: 10240
          # temp-reserve-mb: 150
          # swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004) libpam0g-dev liblzma-dev libsnmp-dev 
        sudo apt -y install gcc g++ build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch flex bison make autoconf texinfo unzip sharutils subversion ncurses-term zlib1g-dev ccache upx lib32gcc-s1 libc6-dev-i386 uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev libglib2.0-dev xmlto qemu-utils automake libtool
        sudo -E apt-get -qq install python3-pip libcrypto++-dev  qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qtbase5-private-dev libqt5sql5 libqt5sql5-mysql libqt5sql5-odbc libqt5sql5-psql libqt5sql5-sqlite libqt5sql5-tds qttools5-dev-tools 
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir/openwrt
        # sudo chown -R $USER:$GROUPS ${{ github.repository }}    解析为Fatty911/AutoBuild~
        sudo chown -R $USER:$GROUPS /workdir
        sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
        pip install mega.py || pip3 install mega.py || python -m pip install mega.py || exit 1

    - name: Download from MEGA
      env:
        MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
        MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      run: |
        # 确保 mega.py 已安装
        pip install mega.py || exit 1
        # 下载文件到当前目录
        python download_from_MEGA.py "$MEGA_USERNAME" "$MEGA_PASSWORD" "${{ env.SOURCE }}"
    
    - name: 解压文件
      run: |
        tar -xzvf ${{ env.SOURCE }}.tar.gz
        cat openwrt/feeds/packages/lang/python/python3-version.mk
        
    - name: Compile Remaining packages
      id: compile_remaining
      # if: steps.main_packages.conclusion == 'success'
      run: |
        cd openwrt
        # set -x
        LOG_FILE="packages.log"
        cp ../compile_with_retry.sh .
        bash compile_with_retry.sh "make -j1 package/compile V=s" "packages.log" 8 "error:|failed|undefined reference"  


    - name: Try compiling the firmware
      id: compile_attempt
      run: |
        cd openwrt
        echo "开始执行修复后重试编译..."
        # set -o pipefail
        LOG_FILE="compile.log"
        cp ../compile_with_retry.sh .
        bash compile_with_retry.sh "make -j1 V=s" "compile.log" 5 "error:|failed|undefined reference" 
        
        
    - name: Check for .bin file after initial compilation
      id: check_bin_initial
      run: |
        if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
          echo "BIN_EXISTS=true" >> $GITHUB_ENV
          echo "bin_status=success" >> $GITHUB_ENV
        else
          echo "BIN_EXISTS=false" >> $GITHUB_ENV
        fi
    - name: Perform manual porting for Xiaomi Mi Router 4
      id: transplant
      if: env.BIN_EXISTS == 'false'
      run: |
        cd openwrt
        echo "Performing manual porting for Xiaomi Mi Router 4..."
        # Clone lede-source for necessary files
        git clone https://github.com/Lienol/lede lede-source
        # Copy DTS file
        cp lede-source/target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts target/linux/ramips/dts/
        # Define mt7621.mk
        tee target/linux/ramips/image/mt7621.mk <<'EOF'
        DEFAULT_SOC := mt7621
        define Image/Prepare
          rm -f $$(KDIR)/ubi_mark
          echo -ne '\xde\xad\xc0\xde' > $$(KDIR)/ubi_mark
        endef
        define Device/nand
          $$(Device/dsa-migration)
          BLOCKSIZE := 128k
          KERNEL_SIZE := 4096k
          PAGESIZE := 2048
          UBINIZE_OPTS := -E 5
          IMAGE/sysupgrade.bin := sysupgrade-tar | append-metadata
        endef
        define Device/xiaomi_nand_separate
          $$(Device/nand)
          $$(Device/uimage-lzma)
          DEVICE_VENDOR := Xiaomi
          IMAGES += kernel1.bin rootfs0.bin
          image_kernel1.bin := append-kernel
          image_rootfs0.bin := append-ubi | check-size
        endef
        define Device/xiaomi_mi-router-4
          $(Device/nand)
          $(Device/uimage-lzma)
          DEVICE_VENDOR := Xiaomi
          DEVICE_MODEL := Mi Router 4
          DEVICE_DTS := mt7621_xiaomi_mi-router-4
          IMAGE_SIZE := 111279k
          DEVICE_PACKAGES := kmod-mt7603 kmod-mt76x2 kmod-usb3
          IMAGES += kernel1.bin rootfs0.bin
          IMAGE/kernel1.bin := append-kernel
          IMAGE/rootfs0.bin := append-ubi | check-size
        endef
        TARGET_DEVICES += xiaomi_mi-router-4
        EOF
        # Copy base-files
        cp -r lede-source/target/linux/ramips/mt7621/base-files target/linux/ramips/mt7621/
        rm -rf lede-source
        # Adjust IMAGE_SIZE
        sed -i 's/IMAGE_SIZE := 124416k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
        sed -i 's/IMAGE_SIZE := 16064k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
        # Adjust DTS partition size to 114MB
        sed -i 's/reg = <0x50000 0xfb0000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
        sed -i 's/reg = <0x50000 0x1000000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
        # Define partitions if not present
        if ! grep -q 'partition@0' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts; then
          echo "Partition not defined, fixing..."
          sed -i '/partitions {/a\
            compatible = "fixed-partitions";\
            #address-cells = <1>;\
            #size-cells = <1>;\
          partition@0 {\
            label = "u-boot";\
            reg = <0x0 0x30000>;\
            read-only;\
          };\
          partition@30000 {\
            label = "u-boot-env";\
            reg = <0x30000 0x10000>;\
            read-only;\
          };\
          factory: partition@40000 {\
            label = "factory";\
            reg = <0x40000 0x10000>;\
            read-only;\
          };\
          partition@50000 {\
            label = "firmware";\
            reg = <0x50000 0x6e00000>;\
          };' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
        fi
        # Fix ROOTFS_PARTSIZE
        sed -i 's|ROOTFS_PARTSIZE=$(shell echo \$\$(( $(CONFIG_TARGET_ROOTFS_PARTSIZE) \* 1024 \* 1024 )))|ROOTFS_PARTSIZE=$(shell echo \$\$(( ${CONFIG_TARGET_ROOTFS_PARTSIZE:-110} * 1024 * 1024 )))|' include/image.mk
        echo "isFixed=true" >> $GITHUB_OUTPUT
        
    - name: Compile the firmware with fixes
      id: compile
      if: env.BIN_EXISTS == 'false' && steps.transplant.output.isFixed == 'true'
      run: |
        cd openwrt
        # 编译固件
        # make -j$(nproc) V=s || make -j1 V=s || exit 1
        make -j1 V=s || exit 1
        echo "bin_status=success" >> $GITHUB_ENV
        
    - name: Set environment variables
      id: setEnv
      if: env.bin_status == 'success' 
      run: |
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
        echo "TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')" >> $GITHUB_ENV
        echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
        KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
        echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV
        echo "set_env_variables=true" >> $GITHUB_OUTPUT



    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.setEnv.outputs.set_env_variables == 'true' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_${{ env.SOURCE }}_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
        path: |
          openwrt/bin
          openwrt/.config

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "firmware_path=$(pwd)" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_${{ env.SOURCE }}_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
        path: ${{ env.firmware_path }}


    - name: Generate release tag
      id: generate_release_tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=Lienol_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "release_tag_status=success" >> $GITHUB_OUTPUT
        echo "release_tag_status: ${{steps.generate_release_tag.outputs.release_tag_status}}"

    - name: Upload firmware to release
      id: up-release
      uses: softprops/action-gh-release@master
      if: steps.generate_release_tag.outputs.release_tag_status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          files: |
            ${{ env.firmware_path }}/*
            openwrt/.config
          name: OpenWRT_${{ steps.generate_release_tag.outputs.release_tag }}
          tag_name: OpenWRT_${{ steps.generate_release_tag.outputs.release_tag }}
     
    - name: Delete temporary files from MEGA
      if: steps.up-release.outcome == 'success'  # 仅在上传 Release 成功后执行
      env:
        MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
        MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
      run: |
        python -m pip install mega.py  # 安装 mega.py 库
        python -c "
        from mega import Mega
        mega = Mega()
        m = mega.login('$MEGA_USERNAME', '$MEGA_PASSWORD')
        folder = m.find('${{ env.SOURCE }}')  # 假设临时文件在 'Lienol' 文件夹中
        if folder:
            m.destroy(folder[0])  # 删除文件夹及其内容
        "
        
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        repository: ${{ github.repository }}
        retain_days: 10
        keep_minimum_runs: 2

    - name: Delete Older Releases
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 5
        delete_tag_pattern: .*${{ env.SOURCE }}.*
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
