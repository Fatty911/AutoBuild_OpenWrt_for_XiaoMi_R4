name: Build coolsnowwolf-LEDE Full for XIAOMI_R4

on:
  push:
    branches:
      - main
      - master
    paths:
      - .github/workflows/Build_coolsnowwolf-LEDE-full_for_XIAOMI_R4.yml
  repository_dispatch:
    types: coolsnowwolf Source Code Update
  workflow_dispatch:
    # inputs:
    #   ssh:
    #     description: 'SSH connection to Actions'
    #     required: false
    #     default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_coolsnowwolf
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  ACTIONS_STEP_DEBUG: true
  SOURCE: coolsnowwolf
  KERNEL_SELECTOR_SH: select_kernel.sh # Define script name

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install parallel cpulimit libpam0g-dev liblzma-dev libsnmp-dev gcc g++ build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch flex bison make autoconf texinfo unzip sharutils subversion ncurses-term zlib1g-dev ccache upx lib32gcc-s1 libc6-dev-i386 uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev libglib2.0-dev xmlto qemu-utils automake libtool
          sudo -E apt-get -qq install libcrypto++-dev qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qtbase5-private-dev libqt5sql5 libqt5sql5-mysql libqt5sql5-odbc libqt5sql5-psql libqt5sql5-sqlite libqt5sql5-tds qttools5-dev-tools
          UBUNTU_VERSION=$(lsb_release -rs)
          if [[ $UBUNTU_VERSION == 20.04 ]]; then
              sudo apt-get -y install lib32gcc1
          elif [[ $UBUNTU_VERSION == 22.04 ]]; then
              sudo apt-get -y install lib32gcc-s1
          else
              sudo apt-get -y install lib32gcc-s1
              echo "非Ubuntu20.04或22.04系统，安装lib32gcc可能失败，如果失败请检查对应系统安装libgcc32的命令"
          fi
          sudo apt -y install python3-pip
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir
          sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE
      
      - name: Clone source code
        working-directory: ${{ github.workspace }}
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir $GITHUB_WORKSPACE

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds and Install feeds
        run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Select Kernel Version
        id: select_kernel
        run: |
          if [ -f "$GITHUB_WORKSPACE/$KERNEL_SELECTOR_SH" ]; then
            chmod +x "$GITHUB_WORKSPACE/$KERNEL_SELECTOR_SH"
            # Run the script relative to the workspace, it will cd into openwrt internally
            "$GITHUB_WORKSPACE/$KERNEL_SELECTOR_SH"
            echo "kernel_selection_done=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: Kernel selector script '$KERNEL_SELECTOR_SH' not found. Skipping kernel selection."
            echo "kernel_selection_done=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j2 || make download -j1
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check space usage after download
        if: (!cancelled())
        run: df -hT


      - name: Compile tools
        run: |
          cd openwrt
          make tools/install -j2 V=s > tools.log 2>&1 || make tools/install -j1 V=s > tools.log 2>&1 || {
            LOG_TAIL=$(tac tools.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
            [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 tools.log)
            echo "编译错误日志摘要："
            echo "$LOG_TAIL"
            exit 1
          }

      - name: Compile toolchain
        id: compile_toolchain
        run: |
          cd openwrt
          set +e
          make toolchain/install -j2 V=s > toolchain.log 2>&1 || make toolchain/install -j1 V=s > toolchain.log 2>&1 || {
            LOG_TAIL=$(tac toolchain.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
            [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 toolchain.log)
            echo "编译错误日志摘要："
            echo "$LOG_TAIL"
            exit 1
          }

      - name: Compile kernel
        run: |
          cd openwrt
          make target/linux/compile -j2 V=s > kernel.log 2>&1 || make target/linux/compile -j1 V=s > kernel.log 2>&1 || {
            LOG_TAIL=$(tac kernel.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
            [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 kernel.log)
            echo "编译错误日志摘要："
            echo "$LOG_TAIL"
            exit 1
          }
      - name: 编译Luci-base
        run: |
          cd openwrt
          make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s
          
      - name: Compile  Batman-adv
        id: compile_batman_1
        run: |   
          cd openwrt
          # cp ../fix_batman_adv.sh . && bash ./fix_batman_adv.sh "make -j1 package/feeds/routing/batman-adv/compile V=s" "batman-adv.log" 8 || bash ./fix_batman_adv.sh "make -j1 package/luci/modules/luci-base/compile V=s" "batman-adv.log" 8
          #cp ../001-fix-multicast.patch ./feeds/routing/batman-adv/patches/0003-fix-multicast-implicit-declaration.patch
          # cp ../0003-fix-multicast-implicit-declaration.patch ./feeds/routing/batman-adv/patches/
          cp ../fix_batman_adv.py . 
          #make -j1 package/feeds/routing/batman-adv/compile V=s
          make -j2 package/feeds/routing/batman-adv/compile V=s || python ./fix_batman_adv.py "make -j1 package/feeds/routing/batman-adv/compile V=s" "batman-adv.log"
          

      - name: Compile the firmware
        id: compile
        if: steps.compile_batman_1.outcome == 'success'
        run: |
          cd openwrt && cp ../compile_with_retry.py .
          echo -e "先尝试$(nproc)线程编译"
          make -j$(nproc) V=s || python compile_with_retry.py "make -j1 V=s" "compile.log"
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')
          echo "TARGET_BOARD=$TARGET_BOARD" >> $GITHUB_ENV
          TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')
          echo "TARGET_SUBTARGET=$TARGET_SUBTARGET" >> $GITHUB_ENV
          TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')
          echo "TARGET_PROFILE=$TARGET_PROFILE" >> $GITHUB_ENV
          echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
          KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: Check space usage after compile
        if: (!cancelled())
        run: df -hT
        
      - name: Organize files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          rm -rf packages
          echo "firmware_path=$(pwd)" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT      
          



      - name: Check for .bin files
        id: check_bin
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          echo "Check File Sizes..."
          ls -lh ${{ env.firmware_path }}/*
          if ! ls ${{ env.firmware_path }}/*.bin 1> /dev/null 2>&1; then
            echo "No .bin files found in firmware_path. Stopping workflow."
            exit 1
          fi
          echo "check_bin_exist=success" >> $GITHUB_OUTPUT
          
      - name: Upload bin directory
        id: upload
        uses: actions/upload-artifact@master
        if: steps.check_bin.check_bin_exist.outcome == 'success'
        with:
          name: OpenWrt_LEDE_coolsnowwolf_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: |
            openwrt/bin
            openwrt/.config

      - name: Rename
        id: rename
        if: steps.check_bin.outputs.check_bin_exist == 'success'
        run: |
          cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          
          for file in openwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.TARGET_PROFILE}}-*; do
            if [ -f "$file" ]; then
              new_file="openwrt_${{ env.SOURCE }}_${{ env.TARGET_BOARD }}_${{ env.TARGET_SUBTARGET }}_${{ env.TARGET_PROFILE}}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}${file#*${{ env.TARGET_PROFILE}}}"
              #${file#*${{ env.TARGET_PROFILE}}}: 这是 Shell 参数扩展（Parameter Expansion）的用法。
              # #: 表示从变量 $file 的 开头 删除最短匹配项。
              # *${{ env.TARGET_PROFILE}}: 表示匹配任何字符 (*) 直到 ${{ env.TARGET_PROFILE}} 的值结束。
              # 效果: 它会删除原始文件名中从开头到 ${{ env.TARGET_PROFILE}}（包含该profile名）的部分。
              # 例如，如果原始文件名是 openwrt-ramips-mt7621-xiaomi_mi-router-3g-squashfs-sysupgrade.bin 且 ${{ env.TARGET_PROFILE}} 是 xiaomi_mi-router-3g，
              # 那么这部分会得到 -squashfs-sysupgrade.bin（注意保留了 profile 名后面的连字符 - 和后续的文件类型/后缀）。
              mv "$file" "$new_file"
              echo "Renamed $file to $new_file"
            fi
          done

      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_LEDE_coolsnowwolf_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: ${{ env.firmware_path }}


      - name: Generate release tag
        id: generate_release_tag
        if: steps.check_bin.outputs.check_bin_exist == 'success'
        run: |
          echo "release_tag=${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "release_tag_status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        id: up-release
        uses: softprops/action-gh-release@master
        if: steps.generate_release_tag.outputs.release_tag_status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          files: |
            ${{ env.firmware_path }}/*
          name: OpenWRT_LEDE_coolsnowwolf_${{ steps.generate_release_tag.outputs.release_tag }}
          tag_name: OpenWRT_LEDE_coolsnowwolf_${{ steps.generate_release_tag.outputs.release_tag }}
          
          
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 3
          delete_tag_pattern: .*${{ env.SOURCE }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
              
