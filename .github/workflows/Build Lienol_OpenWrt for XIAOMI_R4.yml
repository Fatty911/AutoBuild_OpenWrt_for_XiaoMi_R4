#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Lienol for XIAOMI_R4

on:
  repository_dispatch:
    types: Lienol Source Code Update
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  push:
    branches: 
      - master

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_Lienol
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:    
    runs-on: ubuntu-22.04
    steps:    
    
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
          root-reserve-mb: 10240
          # temp-reserve-mb: 150
          # swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004) libpam0g-dev liblzma-dev libsnmp-dev 
        sudo apt -y install gcc g++ build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch flex bison make autoconf texinfo unzip sharutils subversion ncurses-term zlib1g-dev ccache upx lib32gcc-s1 libc6-dev-i386 uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev libglib2.0-dev xmlto qemu-utils automake libtool
        sudo -E apt-get -qq install libcrypto++-dev  qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qtbase5-private-dev libqt5sql5 libqt5sql5-mysql libqt5sql5-odbc libqt5sql5-psql libqt5sql5-sqlite libqt5sql5-tds qttools5-dev-tools 
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir/openwrt
        # sudo chown -R $USER:$GROUPS ${{ github.repository }}    解析为Fatty911/AutoBuild~
        sudo chown -R $USER:$GROUPS /workdir
        sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code
      working-directory: ${{ github.workspace }}
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir $GITHUB_WORKSPACE

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update and Install feeds
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: download
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Check space usage after download
      if: (!cancelled())
      run: df -hT
      
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    # - name: Modify overclocking settings
    #   run: |
    #     cd openwrt
    #     #超频5.10内核至1000Mhz
    #     mv target/linux/ramips/patches-5.10/322-mt7621-fix-cpu-clk-add-clkdev.patch ./322-mt7621-fix-cpu-clk-add-clkdev.patch.bak
    #     wget -O target/linux/ramips/patches-5.10/322-mt7621-fix-cpu-clk-add-clkdev.patch https://raw.githubusercontent.com/Fatty911/AutoBuild_OpenWRT_for_Mi_R4/main/mt7621_overclocking-322-mt7621-fix-cpu-clk-add-clkdev.patch
    - name: Compile tools
      run: |
        cd openwrt
        make tools/install -j1 V=s > tools.log 2>&1
        if [ $? -ne 0 ]; then
          echo "Tools compilation failed"
          exit 1
        fi
    - name: Compile toolchain
      run: |
        cd openwrt
        make toolchain/install -j1 V=s > toolchain.log 2>&1
        if [ $? -ne 0 ]; then
          echo "Toolchain compilation failed"
          exit 1
        fi
    - name: Compile kernel
      run: |
        cd openwrt
        make target/linux/compile -j1 V=s > kernel.log 2>&1
        if [ $? -ne 0 ]; then
          echo "Kernel compilation failed"
          exit 1
        fi
    - name: Compile packages
      id: compile_packages
      run: |
        cd openwrt
        set -o pipefail
        LOG_FILE="packages.log"
        ERROR_PATTERN="error:|failed|undefined reference"
        # 编译并记录日志
        MAX_RETRY=6
        retry_count=0
                           
        while [ $retry_count -lt $MAX_RETRY ]; do
                          make -j2 package/compile V=s > packages.log 2>&1 && break
                          if grep -q "PKG_VERSION" packages.log; then
                                      echo "Fixing PKG_VERSION formats..."
                                      find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                                        if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                                          echo "Found target in $makefile"
                                          sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                                          echo "Modified $makefile:"
                                          grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                                        fi
                                        done
                          # 检查依赖项重复错误
                          elif grep -q "DEPENDS" packages.log; then
                                        echo "Fixing dependency duplicates..."
                                        find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                                          makefile="$1"
                                          awk '\''BEGIN { FS = "[[:space:]]+" }
                                          /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                              split($0, deps, " ")
                                              seen_versioned = ""
                                              seen_bare = ""
                                              result = $1
                                              for (i = 2; i <= length(deps); i++) {
                                                  dep = deps[i]
                                                  pos = index(dep, ">=")
                                                  if (pos > 0) {
                                                      bare = substr(dep, 2, pos-2)
                                                  } else {
                                                      bare = substr(dep, 2)
                                                  }
                                                  if (match(dep, />=/)) {
                                                      if (seen_versioned !~ bare) {
                                                          result = result " " dep
                                                          seen_versioned = seen_versioned " " bare
                                                          gsub(" *" bare " *", " ", seen_bare)
                                                      }
                                                  } else {
                                                      if (seen_versioned !~ bare && seen_bare !~ bare) {
                                                          result = result " " dep
                                                          seen_bare = seen_bare " " bare
                                                      }
                                                  }
                                              }
                                              print result
                                              next
                                          }
                                          { print }
                                          '\'' "$makefile" > "$makefile.tmp"
                                          if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                                            echo "Modified $makefile:"
                                            grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                                            mv "$makefile.tmp" "$makefile"
                                          else
                                            rm -f "$makefile.tmp"
                                          fi
                                        ' _ {} \;
                          elif grep -q "dependency format is invalid" packages.log; then
                                    echo "处理依赖格式错误..."
                                    find . -type f $ -name "Makefile" -o -name "*.mk" $ -exec sh -c '
                                      makefile="$1"
                                      # 修复版本号中的连字符问题并去重
                                      awk -i inplace '\''
                                        BEGIN { FS="[[:space:]]+"; OFS=" " }
                                        /^(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                          delete seen
                                          split($0, parts, "=")
                                          split(parts[2], deps, " ")
                                          new_deps = ""
                                          for (i in deps) {
                                            dep = deps[i]
                                            #gsub(/(>=|<=|>)(\d+\.\d+\.\d+)-(\d+)/, "\\1\\2_\\3", dep)
                                            gsub(/(>=|<=|>)(\d+\.\d+\.\d+)-\d+/, "\\1\\2", $0)
                                            # 去重
                                            if (!seen[dep]++) {
                                              new_deps = new_deps " " dep
                                            }
                                          }
                                          $0 = parts[1] "=" new_deps
                                        }
                                        { print }
                                      '\'' "$makefile"
                                    ' _ {} \;
                                    echo "Fixing PKG_VERSION formats..."
                                        find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                                          if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                                            echo "Found target in $makefile"
                                            sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                                            echo "Modified $makefile:"
                                            grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                                          fi
                                        done
                                    echo "Fixing dependency duplicates..."
                                        find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                                          makefile="$1"
                                          awk '\''BEGIN { FS = "[[:space:]]+" }
                                          /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                              split($0, deps, " ")
                                              seen_versioned = ""
                                              seen_bare = ""
                                              result = $1
                                              for (i = 2; i <= length(deps); i++) {
                                                  dep = deps[i]
                                                  pos = index(dep, ">=")
                                                  if (pos > 0) {
                                                      bare = substr(dep, 2, pos-2)
                                                  } else {
                                                      bare = substr(dep, 2)
                                                  }
                                                  if (match(dep, />=/)) {
                                                      if (seen_versioned !~ bare) {
                                                          result = result " " dep
                                                          seen_versioned = seen_versioned " " bare
                                                          gsub(" *" bare " *", " ", seen_bare)
                                                      }
                                                  } else {
                                                      if (seen_versioned !~ bare && seen_bare !~ bare) {
                                                          result = result " " dep
                                                          seen_bare = seen_bare " " bare
                                                      }
                                                  }
                                              }
                                              print result
                                              next
                                          }
                                          { print }
                                          '\'' "$makefile" > "$makefile.tmp"
                                          if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                                            echo "Modified $makefile:"
                                            grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                                            mv "$makefile.tmp" "$makefile"
                                          else
                                            rm -f "$makefile.tmp"
                                          fi
                                        ' _ {} \;                    
                          elif grep -q "mkdir: cannot create directory.*File exists" packages.log; then
                                      echo "检测到构建目录冲突错误，尝试修复..."
                                      # 提取最后一次出现的失败目录路径
                                      FAILED_DIR=$(grep "mkdir: cannot create directory.*File exists" packages.log | tail -n1 | awk -F ': ' '{print $3}')
                                      if [ -n "$FAILED_DIR" ]; then
                                          echo "正在清理冲突目录: $FAILED_DIR"
                                          rm -rf "$FAILED_DIR"   
                                          # 通过路径推断包名（示例路径：.../coremark-d5fad6bd094899101a4e5fd53af7298160ced6ab/mipsel）
                                          PKG_PATH=$(echo "$FAILED_DIR" | grep -oE 'package/feeds/[^/]+/[^/]+')
                                          if [ -n "$PKG_PATH" ]; then
                                              PKG_NAME=$(basename "$PKG_PATH")
                                              echo "重新编译包: $PKG_NAME"
                                              make -j1 "$PKG_PATH/compile" V=s
                                          else
                                              echo "无法推断包名，尝试重新编译所有包"
                                              make -j1 package/compile V=s
                                          fi
                                      else
                                          echo "无法提取失败路径，尝试重新编译所有包"
                                          make -j1 package/compile V=s
                                      fi  
                          else
                                  tee "$LOG_FILE" || {
                                  # 错误处理：动态截取倒数第二个 Entering directory 到错误行
                                  echo "=== 错误块截取（倒数第二个目录入口到错误行） ==="
                                  
                                  # 步骤1：倒序日志并定位关键行
                                  tac "$LOG_FILE" | awk '
                                      BEGIN { entry_count=0; error_found=0 }
                                      /Entering directory/ && !error_found { 
                                          entry_count++
                                          if (entry_count == 2) {  # 倒数第二个Entering directory
                                              print "----- 错误触发目录入口 -----"
                                              print $0
                                              print "============================="
                                              error_found=1
                                              next
                                          }
                                      }
                                      error_found { 
                                          # 反转回正序前缓存内容
                                          buffer = $0 "\n" buffer
                                          if ($0 ~ /error|failed/) { exit }
                                      }
                                      END { print buffer }
                                  ' | tac  # 恢复正序输出
                                  exit 1
                              }
                          fi     
            retry_count=$((retry_count + 1))
            echo "尝试第 $retry_count 次修复..."
          done 

    

    - name: Try compiling the firmware
      id: compile_attempt
      run: |
        cd openwrt
        set -x
        echo "Trying to compile the firmware..."
        echo "先编译工具链和 luci-base，避免常见错误"
        # make -j$(nproc) tools/compile V=s || make -j1 tools/compile V=s
        make -j1 tools/compile V=s
        # make -j$(nproc) toolchain/compile V=s || make -j1 toolchain/compile V=s
        make -j1 toolchain/compile V=s
        # make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s
        make -j1 package/feeds/luci/luci-base/compile V=s
        echo "尝试直接编译"
        # make -j$(nproc) V=s > compile.log 2>&1 || true
        make -j1 V=s > compile.log 2>&1
        if [ -f "bin/targets/*/*/*.bin" ]; then
          echo "Bin file found, compilation successful."
          echo "status=success" >> $GITHUB_ENV
        else
          echo "No bin file found or compilation failed, checking logs..."
          if grep -q "PKG_VERSION" compile.log; then
            echo "Fixing PKG_VERSION formats..."
            find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
              if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                echo "Found target in $makefile"
                sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                echo "Modified $makefile:"
                grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
              fi
            done
          fi
          # 检查依赖项重复错误
          if grep -q "DEPENDS" compile.log; then
            echo "Fixing dependency duplicates..."
            find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
              makefile="$1"
              awk '\''BEGIN { FS = "[[:space:]]+" }
              /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                  split($0, deps, " ")
                  seen_versioned = ""
                  seen_bare = ""
                  result = $1
                  for (i = 2; i <= length(deps); i++) {
                      dep = deps[i]
                      pos = index(dep, ">=")
                      if (pos > 0) {
                          bare = substr(dep, 2, pos-2)
                      } else {
                          bare = substr(dep, 2)
                      }
                      if (match(dep, />=/)) {
                          if (seen_versioned !~ bare) {
                              result = result " " dep
                              seen_versioned = seen_versioned " " bare
                              gsub(" *" bare " *", " ", seen_bare)
                          }
                      } else {
                          if (seen_versioned !~ bare && seen_bare !~ bare) {
                              result = result " " dep
                              seen_bare = seen_bare " " bare
                          }
                      }
                  }
                  print result
                  next
              }
              { print }
              '\'' "$makefile" > "$makefile.tmp"
              if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                echo "Modified $makefile:"
                grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                mv "$makefile.tmp" "$makefile"
              else
                rm -f "$makefile.tmp"
              fi
            ' _ {} \;
          fi
          echo "执行修复后重试编译..."
          # make -j$(nproc) V=s || make -j1 V=s
          make -j1 V=s
          if [ -f "bin/targets/*/*/*.bin" ]; then
              echo "修复后编译成功"
              echo "status=success" >> $GITHUB_ENV
          else
              echo "修复后仍然失败，请检查日志"
              echo "status=needs_fix" >> $GITHUB_ENV
          fi 
        fi
        
    - name: Check for .bin file after initial compilation
      id: check_bin_initial
      run: |
        if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
          echo "BIN_EXISTS=true" >> $GITHUB_ENV
        else
          echo "BIN_EXISTS=false" >> $GITHUB_ENV
        fi
    - name: Perform manual porting for Xiaomi Mi Router 4
      id: transplant
      if: env.status == 'needs_fix' && env.BIN_EXISTS == 'false'
      run: |
        cd openwrt
        echo "Performing manual porting for Xiaomi Mi Router 4..."
        # Clone lede-source for necessary files
        git clone https://github.com/coolsnowwolf/lede lede-source
        # Copy DTS file
        cp lede-source/target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts target/linux/ramips/dts/
        # Define mt7621.mk
        tee target/linux/ramips/image/mt7621.mk <<'EOF'
        DEFAULT_SOC := mt7621
        define Image/Prepare
          rm -f $$(KDIR)/ubi_mark
          echo -ne '\xde\xad\xc0\xde' > $$(KDIR)/ubi_mark
        endef
        define Device/nand
          $$(Device/dsa-migration)
          BLOCKSIZE := 128k
          KERNEL_SIZE := 4096k
          PAGESIZE := 2048
          UBINIZE_OPTS := -E 5
          IMAGE/sysupgrade.bin := sysupgrade-tar | append-metadata
        endef
        define Device/xiaomi_nand_separate
          $$(Device/nand)
          $$(Device/uimage-lzma)
          DEVICE_VENDOR := Xiaomi
          IMAGES += kernel1.bin rootfs0.bin
          image_kernel1.bin := append-kernel
          image_rootfs0.bin := append-ubi | check-size
        endef
        define Device/xiaomi_mi-router-4
          $(Device/nand)
          $(Device/uimage-lzma)
          DEVICE_VENDOR := Xiaomi
          DEVICE_MODEL := Mi Router 4
          DEVICE_DTS := mt7621_xiaomi_mi-router-4
          IMAGE_SIZE := 111279k
          DEVICE_PACKAGES := kmod-mt7603 kmod-mt76x2 kmod-usb3
          IMAGES += kernel1.bin rootfs0.bin
          IMAGE/kernel1.bin := append-kernel
          IMAGE/rootfs0.bin := append-ubi | check-size
        endef
        TARGET_DEVICES += xiaomi_mi-router-4
        EOF
        # Copy base-files
        cp -r lede-source/target/linux/ramips/mt7621/base-files target/linux/ramips/mt7621/
        rm -rf lede-source
        # Adjust IMAGE_SIZE
        sed -i 's/IMAGE_SIZE := 124416k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
        sed -i 's/IMAGE_SIZE := 16064k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
        # Adjust DTS partition size to 114MB
        sed -i 's/reg = <0x50000 0xfb0000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
        sed -i 's/reg = <0x50000 0x1000000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
        # Define partitions if not present
        if ! grep -q 'partition@0' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts; then
          echo "Partition not defined, fixing..."
          sed -i '/partitions {/a\
            compatible = "fixed-partitions";\
            #address-cells = <1>;\
            #size-cells = <1>;\
          partition@0 {\
            label = "u-boot";\
            reg = <0x0 0x30000>;\
            read-only;\
          };\
          partition@30000 {\
            label = "u-boot-env";\
            reg = <0x30000 0x10000>;\
            read-only;\
          };\
          factory: partition@40000 {\
            label = "factory";\
            reg = <0x40000 0x10000>;\
            read-only;\
          };\
          partition@50000 {\
            label = "firmware";\
            reg = <0x50000 0x6e00000>;\
          };' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
        fi
        # Fix ROOTFS_PARTSIZE
        sed -i 's|ROOTFS_PARTSIZE=$(shell echo \$\$(( $(CONFIG_TARGET_ROOTFS_PARTSIZE) \* 1024 \* 1024 )))|ROOTFS_PARTSIZE=$(shell echo \$\$(( ${CONFIG_TARGET_ROOTFS_PARTSIZE:-110} * 1024 * 1024 )))|' include/image.mk
        echo "isFixed=true" >> $GITHUB_OUTPUT
        
    - name: Compile the firmware with fixes
      id: compile
      if: env.status == 'needs_fix' && steps.transplant.output.isFixed == 'true'
      run: |
        cd openwrt
        
        # 编译固件
        # make -j$(nproc) V=s || make -j1 V=s || exit 1
        make -j1 V=s || exit 1
        echo "status=success" >> $GITHUB_ENV
        
    - name: Set environment variables
      id: setEnv
      if: env.status == 'success' 
      run: |
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
        echo "TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')" >> $GITHUB_ENV
        echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
        KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
        echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV
        echo "set_env_variables=true" >> $GITHUB_OUTPUT



    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.setEnv.outputs.set_env_variables == 'true' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_Lienol_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
        path: |
          openwrt/bin
          openwrt/.config

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "firmware_path=$(pwd)" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_Lienol_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
        path: ${{ env.firmware_path }}


    - name: Generate release tag
      id: generate_release_tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=Lienol_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "release_tag_status=success" >> $GITHUB_OUTPUT
        echo "release_tag_status: ${{steps.generate_release_tag.outputs.release_tag_status}}"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.generate_release_tag.outputs.release_tag_status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          files: |
            ${{ env.firmware_path }}/*
            openwrt/.config
          name: OpenWRT_${{ steps.generate_release_tag.outputs.release_tag }}
          tag_name: OpenWRT_${{ steps.generate_release_tag.outputs.release_tag }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        repository: ${{ github.repository }}
        retain_days: 10
        keep_minimum_runs: 2

    - name: Delete Older Releases
      uses: dev-drprasad/delete-older-releases@master
      with:
        #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 5
        delete_tag_pattern: Lienol
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
