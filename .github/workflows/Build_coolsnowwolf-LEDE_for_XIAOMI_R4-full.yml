#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build coolsnowwolf-LEDE for XIAOMI_R4 FULL

on:
  repository_dispatch:
    types: coolsnowwolf Source Code Update
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      # repo_url:
      #   description: 'The URL of the source code repository'
      #   required: true
      #   default: https://github.com/coolsnowwolf/lede
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_coolsnowwolf
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  ACTIONS_STEP_DEBUG: true
permissions:
  contents: write
  packages: write
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
            
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
          root-reserve-mb: 10240
          # temp-reserve-mb: 150
          # swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -qq update
        # sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq install libpam0g-dev liblzma-dev libsnmp-dev gcc g++ build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch flex bison make autoconf texinfo unzip sharutils subversion ncurses-term zlib1g-dev ccache upx lib32gcc-s1 libc6-dev-i386 uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev libglib2.0-dev xmlto qemu-utils automake libtool
        sudo -E apt-get -qq install libcrypto++-dev  qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake qtbase5-private-dev libqt5sql5 libqt5sql5-mysql libqt5sql5-odbc libqt5sql5-psql libqt5sql5-sqlite libqt5sql5-tds qttools5-dev-tools
        # 检查Ubuntu版本并安装相应的包
        UBUNTU_VERSION=$(lsb_release -rs)
        if [[ $UBUNTU_VERSION == 20.04 ]]; then
            sudo apt-get -y install lib32gcc1
        elif [[ $UBUNTU_VERSION == 22.04 ]]; then
            sudo apt-get -y install lib32gcc-s1
        else
            sudo apt-get -y install lib32gcc-s1
            echo "非Ubuntu20.04或22.04系统，安装lib32gcc可能失败，如果失败请检查对应系统安装libgcc32的命令"
        fi
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir/openwrt
        # sudo chown -R $USER:$GROUPS ${{ github.repository }}    解析为Fatty911/AutoBuild~
        sudo chown -R $USER:$GROUPS /workdir
        sudo chown -R $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Clone source code
      working-directory: ${{ github.workspace }}
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir $GITHUB_WORKSPACE

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds and Install feeds
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download 
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Check space usage after download
      if: (!cancelled())
      run: df -hT
      
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      
    # - name: Modify overclocking settings
    #   run: |
    #     cd openwrt
    #     #超频5.10内核至1000Mhz
    #     mv target/linux/ramips/patches-5.10/322-mt7621-fix-cpu-clk-add-clkdev.patch ./322-mt7621-fix-cpu-clk-add-clkdev.patch.bak
    #     wget -O target/linux/ramips/patches-5.10/322-mt7621-fix-cpu-clk-add-clkdev.patch https://raw.githubusercontent.com/Fatty911/AutoBuild_OpenWRT_for_Mi_R4/main/mt7621_overclocking-322-mt7621-fix-cpu-clk-add-clkdev.patch
  
    # - name: Fix batman-adv bug
    #   run: |
    #     cd openwrt
    #     git config --global user.email fattyvirgo911@gmail.com
    #     git config --global user.name Fatty911
    #     cd package/feeds/ && rm -rf routing && git clone https://github.com/coolsnowwolf/routing.git routing && cd routing && git checkout 5437d2c91fd9f15e06fbea46677abb529ed3547c
    - name: Compile tools
      run: |
        cd openwrt
        make tools/install -j1 V=s > tools.log 2>&1 ||{
          # 截取从倒数第三个"Entering directory"到末尾的日志
                LOG_TAIL=$(tac tools.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
                [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 tools.log)  # 保底截取最后100行
                echo "编译错误日志摘要："
                echo "$LOG_TAIL"
                exit 1
        }
    - name: Compile toolchain
      id: compile_toolchain
      run: |
        cd openwrt
        set +e
        make toolchain/install -j1 V=s > toolchain.log 2>&1 ||{
          # 截取从倒数第三个"Entering directory"到末尾的日志
                LOG_TAIL=$(tac toolchain.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
                [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 toolchain.log)  # 保底截取最后100行
                echo "编译错误日志摘要："
                echo "$LOG_TAIL"
                exit 1
        }

    # - name: Retry with new batman-adv
    #   if: failure()  && env.batman_error == 'true'
    #   run: |
    #     cd openwrt
    #     # 更新batman-adv到最新版本
        # LATEST_TAG=$(git ls-remote --tags https://git.open-mesh.org/batman-adv.git | grep -v "\\^{}" | grep -E "refs/tags/v[0-9]+\\.[0-9]+(\\.[0-9]+)?$" | sed "s|.*/||" | sort -V | tail -n 1)
        # TARBALL_URL="https://downloads.open-mesh.org/batman/releases/batman-adv-${LATEST_TAG}/batman-adv-${LATEST_TAG}.tar.gz"
        
        # curl -OL "${TARBALL_URL}" || exit 1
        # HASH=$(sha256sum "batman-adv-${LATEST_TAG}.tar.gz" | awk '{print $1}')
        
        # sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${LATEST_TAG}/" feeds/routing/batman-adv/Makefile
        # sed -i "s/PKG_HASH:=.*/PKG_HASH:=${HASH}/" feeds/routing/batman-adv/Makefile
        
        # 清理并重试编译
        # make package/feeds/routing/batman-adv/clean
        # make toolchain/install -j1 V=s


    - name: Compile kernel
      run: |
        cd openwrt
        make target/linux/compile -j1 V=s > kernel.log 2>&1 ||{
          # 截取从倒数第三个"Entering directory"到末尾的日志
                LOG_TAIL=$(tac kernel.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
                [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 kernel.log)  # 保底截取最后100行
                echo "编译错误日志摘要："
                echo "$LOG_TAIL"
                exit 1
                }
                
    - name: Compile Luci-base and Batman-adv before other packages
      id: compile_batman_1
      run: |
        cd openwrt
        LOG_FILE="batman-adv.log"
        echo "根据https://www.right.com.cn/forum/forum.php?mod=redirect&goto=findpost&ptid=1086753&pid=11643216，首次编译时，容易报错：bash: po2lmo: command not found 这应该是因为编译XXXXXXX需要把 luci-base 先编译出来，但是目前顺序可能是先编译了 hello world 导致出现问题，此时使用 make package/feeds/luci/luci-base/compile V=99 编译出 luci-base 后再编译就不会报错。 这个问题虽然出现的频率不高，但是也不低 "
        make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s
        make -j1 V=s package/feeds/routing/batman-adv/compile > batman-adv.log 2>&1 || {
                                    echo "编译batman-adv失败，查看日志报错ERROR之前的Entering Directory到Error处"
                                    echo "LOG_FILE的路径是：$LOG_FILE"
                                    tee "$LOG_FILE" || {
                                                    # echo "=== 错误块截取（最后100行） ==="
                                                    # tail -n 100 "$LOG_FILE"                                            
                                                    echo "检查 'ERROR'、'Error' 或 'fail' 关键字，没找到就查看末尾200行日志："
                                                    grep -i -A50 -B20 'error\|fail' "$LOG_FILE" || tail -n 200 "$LOG_FILE"
                                                        }
                                    echo "batman_first_fail=true" >> $GITHUB_OUTPUT
                                    exit 1
                                                                                        }
        
    - name: Try compiling batman-adv
      id: compile_batman_2
      if: steps.compile_batman_1.outputs.batman_first_fail == 'true'
      run: |
        cd openwrt
        set -x
        MAX_RETRY=4
        ATTEMPT=0
        TOOLCHAIN_DIR="staging_dir/toolchain-mipsel_24kc_gcc-${GCC_VERSION}_musl"
        # make -j1 V=s package/feeds/routing/batman-adv/compile > batman-adv.log 2>&1 || {
        echo "发现batman-adv的报错，开始尝试查找错误..." && {
        # 循环尝试编译，最多重试 4 次
        while [ $ATTEMPT -le $MAX_RETRY ]; do
            echo "查找此次报错原因，查看报错处日志前50行到后20行"
            grep -B20 -A50 'FAILED' batman-adv.log
            if grep -q "ld-musl" batman-adv.log; then
                  echo "检测到ld-musl-*.so* not found, attempting to compile toolchain..."
                  GCC_VERSION=$(ls $(pwd)/staging_dir/toolchain-mipsel_24kc_gcc-*/ | grep -oP 'gcc-\K\d+\.\d+\.\d+' || echo "unknown")
                  echo "GCC_VERSION=$GCC_VERSION"       
                  # 检查 toolchain 是否已编译并包含必要文件
                  echo "Checking toolchain directory: $TOOLCHAIN_DIR"
                  ls -l $TOOLCHAIN_DIR || echo "Toolchain directory not found!"
                  ls -l $TOOLCHAIN_DIR/lib/ || echo "Toolchain lib directory empty or not found!"   
                  # 如果 ld-musl 文件不存在，尝试重新编译 toolchain
                  if ! ls $TOOLCHAIN_DIR/lib/ld-musl-*.so* >/dev/null 2>&1; then
                    echo "ld-musl-*.so* not found, attempting to compile toolchain..."
                    make toolchain/compile V=s || (make toolchain/clean V=s && make toolchain/compile V=s)
                    # 再次检查文件是否存在
                    ls $TOOLCHAIN_DIR/lib/ld-musl-*.so* || (echo "Toolchain compilation failed to produce ld-musl files!" && exit 1)
                  fi
                  # 复制文件
                  echo "Copying ld-musl files..."
                  cp -fpR $TOOLCHAIN_DIR/lib/ld-musl-*.so* build_dir/target-mipsel_24kc_musl/toolchain/.pkgdir/libc/lib/
                  make toolchain/compile V=s || (make toolchain/clean V=s && make toolchain/compile V=s)
            elif grep -qi 'tools/' batman-adv.log; then
                echo "检测到tools工具集错误，尝试修复..."
                make tools/compile V=s || (make tools/clean V=s && make tools/compile V=s || make tools/compile -j1 V=s)
            elif grep -qi 'libtool' batman-adv.log; then
                  echo "检测到 libtool 错误，尝试修复..."
                  cd build_dir/host/libtool*
                  autoreconf -fi
                  ./configure --prefix=/host
                  cd ../../..
            elif grep -q "br_multicast_has_" batman-adv.log; then
                    echo "检测到 batman-adv调用br_multicast_has_函数 错误，尝试应用补丁..."
                    # 创建补丁目录并写入补丁内容
                    # 使用YAML文本块语法生成补丁
                    BATMAN_PATCH_DIR="feeds/routing/batman-adv/patches"
                    mkdir -p $BATMAN_PATCH_DIR
                    cp ../001-fix-multicast.patch $BATMAN_PATCH_DIR/001-fix-multicast.patch
            elif grep -q "hunks FAILED" batman-adv.log; then
                  echo "hunks FAILED打补丁失败，切换旧版本源码"
                  cd package/feeds/routing
                  git clone --no-checkout https://github.com/coolsnowwolf/routing.git tmp_batman
                  cd tmp_batman
                  git checkout 5437d2c91fd9f15e06fbea46677abb529ed3547c -- batman-adv
                  cd ..
                  rm -rf batman-adv
                  mv tmp_batman/batman-adv .
                  rm -rf tmp_batman
                  cd ../.. 
                  ./scripts/feeds update routing
                  ./scripts/feeds install -p routing
                  echo "替换batman-adv源码完毕，回到openwrt根目录再次尝试编译"
            else
                  LOG_TAIL=$(tac batman-adv.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
                  [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 batman-adv.log)  # 保底截取最后100行
                  echo "编译错误日志摘要（最后100行）："
                  echo "$LOG_TAIL"
                  exit 1
             fi 
          # 增加重试计数器
           ((ATTEMPT++))
          make package/feeds/routing/batman-adv/{clean,compile} V=s -j1
          # 如果超过最大重试次数，标记失败并退出循环
          if [ $ATTEMPT -gt $MAX_RETRY ]; then
            echo "batman_adv_status=failed" >> $GITHUB_ENV
            echo "编译batman-adv失败，退出编译"
            exit 1
          fi
     
          echo "进行第 $ATTEMPT 次重试..."
        done
        }

        
    - name: Compile packages
      id: compile_packages
      run: |
        cd openwrt
        make -j1 package/compile V=s > packages.log 2>&1 || {
            MAX_RETRY=4
            retry_count=0
            while [ $retry_count -lt $MAX_RETRY ]; do
                  if grep -q "PKG_VERSION" packages.log; then
                        echo "Fixing PKG_VERSION formats..."
                        find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                          if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                            echo "Found target in $makefile"
                            sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                            echo "Modified $makefile:"
                            grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                          fi
                        done
                    # 检查依赖项重复错误
                  elif grep -q "DEPENDS" packages.log; then
                        echo "Fixing dependency duplicates..."
                        find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                          makefile="$1"
                          awk '\''BEGIN { FS = "[[:space:]]+" }
                          /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                              split($0, deps, " ")
                              seen_versioned = ""
                              seen_bare = ""
                              result = $1
                              for (i = 2; i <= length(deps); i++) {
                                  dep = deps[i]
                                  pos = index(dep, ">=")
                                  if (pos > 0) {
                                      bare = substr(dep, 2, pos-2)
                                  } else {
                                      bare = substr(dep, 2)
                                  }
                                  if (match(dep, />=/)) {
                                      if (seen_versioned !~ bare) {
                                          result = result " " dep
                                          seen_versioned = seen_versioned " " bare
                                          gsub(" *" bare " *", " ", seen_bare)
                                      }
                                  } else {
                                      if (seen_versioned !~ bare && seen_bare !~ bare) {
                                          result = result " " dep
                                          seen_bare = seen_bare " " bare
                                      }
                                  }
                              }
                              print result
                              next
                          }
                          { print }
                          '\'' "$makefile" > "$makefile.tmp"
                          if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                            echo "Modified $makefile:"
                            grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                            mv "$makefile.tmp" "$makefile"
                          else
                            rm -f "$makefile.tmp"
                          fi
                        ' _ {} \;
                  elif grep -q "dependency format is invalid" packages.log; then
                      echo "处理依赖格式错误..."
                      find . -type f $ -name "Makefile" -o -name "*.mk" $ -exec sh -c '
                        makefile="$1"
                        # 修复版本号中的连字符问题并去重
                        awk -i inplace '\''
                          BEGIN { FS="[[:space:]]+"; OFS=" " }
                          /^(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                            delete seen
                            split($0, parts, "=")
                            split(parts[2], deps, " ")
                            new_deps = ""
                            for (i in deps) {
                              dep = deps[i]
                              #gsub(/(>=|<=|>)(\d+\.\d+\.\d+)-(\d+)/, "\\1\\2_\\3", dep)
                              gsub(/(>=|<=|>)(\d+\.\d+\.\d+)-\d+/, "\\1\\2", $0)
                              # 去重
                              if (!seen[dep]++) {
                                new_deps = new_deps " " dep
                              }
                            }
                            $0 = parts[1] "=" new_deps
                          }
                          { print }
                        '\'' "$makefile"
                      ' _ {} \;
                      echo "Fixing PKG_VERSION formats..."
                          find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
                            if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                              echo "Found target in $makefile"
                              sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                              echo "Modified $makefile:"
                              grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
                            fi
                          done
                      echo "Fixing dependency duplicates..."
                          find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
                            makefile="$1"
                            awk '\''BEGIN { FS = "[[:space:]]+" }
                            /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                                split($0, deps, " ")
                                seen_versioned = ""
                                seen_bare = ""
                                result = $1
                                for (i = 2; i <= length(deps); i++) {
                                    dep = deps[i]
                                    pos = index(dep, ">=")
                                    if (pos > 0) {
                                        bare = substr(dep, 2, pos-2)
                                    } else {
                                        bare = substr(dep, 2)
                                    }
                                    if (match(dep, />=/)) {
                                        if (seen_versioned !~ bare) {
                                            result = result " " dep
                                            seen_versioned = seen_versioned " " bare
                                            gsub(" *" bare " *", " ", seen_bare)
                                        }
                                    } else {
                                        if (seen_versioned !~ bare && seen_bare !~ bare) {
                                            result = result " " dep
                                            seen_bare = seen_bare " " bare
                                        }
                                    }
                                }
                                print result
                                next
                            }
                            { print }
                            '\'' "$makefile" > "$makefile.tmp"
                            if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                              echo "Modified $makefile:"
                              grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                              mv "$makefile.tmp" "$makefile"
                            else
                              rm -f "$makefile.tmp"
                            fi
                          ' _ {} \;                    
                  else
                      # 截取从倒数第三个"Entering directory"到末尾的日志
                      LOG_TAIL=$(tac packages.log | awk '/Entering directory/{count++} count==3{exit}1' | tac)
                      [ -z "$LOG_TAIL" ] && LOG_TAIL=$(tail -n 100 packages.log)  # 保底截取最后100行
                      echo "编译错误日志摘要："
                      echo "$LOG_TAIL"
                      exit 1
                  fi     
                retry_count=$((retry_count + 1))
                echo "尝试第 $retry_count 次修复..."
                make -j1 package/compile V=s > packages.log 2>&1
              done 
          }

        
    
        
    #     # wget https://github.com/coolsnowwolf/lede/files/14081054/2023.3-batman-adv.tar.gz
    #     wget https://downloads.open-mesh.org/batman/releases/batman-adv-2024.1/batman-adv-2024.1.tar.gz
    #     tar -xvzf batman-adv-2024.1.tar.gz && mv batman-adv-2024.1 batman-adv && mv -f batman-adv package/feeds/routing/
    #     # make package/feeds/routing/batman-adv/compile V=s | make -j1 package/feeds/routing/batman-adv/compile V=s
        # tar -xvzf 2023.3-batman-adv.tar.gz -C package/network/services/batman-adv
    #     tar -xvzf 2023.3-batman-adv.tar.gz && mv  batman-adv/* build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/batman-adv-2023.3/ 
    #     wget https://github.com/coolsnowwolf/lede/files/14080071/0006-fix-build-with-kernel-6.6.patch
        
    #     cp 0006-fix-build-with-kernel-6.6.patch build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/batman-adv-2023.3/ && cd build_dir/target-mipsel_24kc_musl/linux-ramips_mt7621/batman-adv-2023.3/ && git am 0006-fix-build-with-kernel-6.6.patch




       
    - name: Compile the firmware
      id: compile
      if: steps.compile_packages.conclusion == 'success'
      run: |
        #开始编译
        cd openwrt
        echo -e "$(nproc) thread compile"   
        make -j$(nproc) V=s  || make -j1 V=s || sed -i 's/--set=llvm.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/g' ${{ github.workspace }}/openwrt/feeds/packages/lang/rust/Makefile && make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        # KERNEL_VERSION=$(cat bin/targets/*/version.buildinfo | grep 'kernel_version' | cut -d'=' -f2)
        # # echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV    调用env.kernel_version会报错
        # echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')
        echo "检测TARGET_BOARD是否在.config中成功找到：$TARGET_BOARD"
        echo "TARGET_BOARD=$TARGET_BOARD" >> $GITHUB_ENV
        TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')
        echo "检测TARGET_SUBTARGET是否在.config中成功找到：$TARGET_SUBTARGET"
        echo "TARGET_SUBTARGET=$TARGET_SUBTARGET" >> $GITHUB_ENV
        TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')
        echo "检测TARGET_PROFILE是否在.config中成功找到：$TARGET_PROFILE"
        echo "TARGET_PROFILE=$TARGET_PROFILE" >> $GITHUB_ENV
        echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
        KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
        echo "检查是否获取到内核版本号：$KERNEL_VERSION"
        echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV
        
    - name: Rename
      id: rename
      if: steps.compile.conclusion == 'success'
      run: |
        cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
        for file in openwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.TARGET_PROFILE}}-*; do
          if [ -f "$file" ]; then
            new_file="openwrt_coolsnowwolf_${{ env.TARGET_BOARD }}_${{ env.TARGET_SUBTARGET }}_${{ env.TARGET_PROFILE}}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}${file#*${{ env.TARGET_PROFILE}}}"
            mv "$file" "$new_file"
            echo "Renamed $file to $new_file"
          fi
        done


    - name: Check space usage after compile
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.conclusion == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_LEDE_coolsnowwolf_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
        path: |
          openwrt/bin
          openwrt/.config

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "firmware_path=$(pwd)" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_LEDE_coolsnowwolf_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
        path: ${{ env.firmware_path }}

    - name: Check for .bin files
      id: check_bin
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        echo "Check File Sizes..."
        ls -lh ${{ env.firmware_path }}/*
        if ! ls ${{ env.firmware_path }}/*.bin 1> /dev/null 2>&1; then
          echo "No .bin files found in firmware_path. Stopping workflow."
          exit 1
        fi
    

    - name: Generate release tag
      id: generate_release_tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.check_bin.conclusion == 'success'
      run: |
        echo "release_tag=${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "release_tag_status=success" >> $GITHUB_OUTPUT
        echo "release_tag_status: ${{steps.generate_release_tag.outputs.release_tag_status}}"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.generate_release_tag.outputs.release_tag_status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          files: |
            ${{ env.firmware_path }}/*
          name: OpenWRT_LEDE_coolsnowwolf_${{ steps.generate_release_tag.outputs.release_tag }}
          tag_name: OpenWRT_LEDE_coolsnowwolf_${{ steps.generate_release_tag.outputs.release_tag }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        repository: ${{ github.repository }}
        retain_days: 5
        keep_minimum_runs: 2

    - name: Delete Older Releases
      uses: dev-drprasad/delete-older-releases@master
      with:
        #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 5
        delete_tag_pattern: coolsnowwolf
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
