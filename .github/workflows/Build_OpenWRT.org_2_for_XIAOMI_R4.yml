name: Build OpenWRT.org 2 fix and transplant for XIAOMI_R4 

on:
  workflow_run:
    workflows: ["Build OpenWRT.org 1 before transplant for XIAOMI_R4"]  # 工作流 1 的名称
    types:
      - completed  # 当工作流 1 完成时触发
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: true
        default: false
  push:
    branches: 
      - master
      - main
    paths:
      - .github/workflows/Build_OpenWRT.org_2_for_XIAOMI_R4.yml

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_OpenWrt_org
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  SOURCE: OpenWrt.org_official

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'push'}}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 10240
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
            
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          #sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          #sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* 
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list || true
          sudo -E apt-get -qq update
          sudo apt install software-properties-common -y || true
          sudo add-apt-repository universe || true
          sudo add-apt-repository multiverse || true
          sudo apt upgrade -y
          sudo apt install -y python3-pip parallel jq perl build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-distutils rsync bc wget ccache flex bison libelf-dev || sudo apt install -y flex bison libelf-dev build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-venv python3-pip rsync bc wget ccache perl || sudo apt policy build-essential git gettext subversion ccache python3-distutils
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir/openwrt
          pip install mega.py || pip3 install mega.py || python -m pip install mega.py || exit 1


      - name: Download from MEGA
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        run: |
          # 确保 mega.py 已安装
          pip install mega.py || exit 1
          # 下载文件到当前目录
          python download_from_MEGA.py "$MEGA_USERNAME" "$MEGA_PASSWORD" "${{ env.SOURCE }}"
      
      
      - name: 解压文件
        run: |
          echo "解压前"
          pwd && ls -la
          tar -xzf ${{ env.SOURCE }}.tar.gz
          echo "解压完成后查看压缩包内"
          ls -la openwrt

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          limit-access-to-actor: false
          timeout-minutes: 300
      
      - name: Build image
        id: build_image
        run: |
          cd openwrt
          LOG_FILE="image.log"
          #cp ../compile_with_retry.sh . && bash compile_with_retry.sh "make -j1 V=s" "image.log" 7
          cp ../compile_with_retry.py . && python compile_with_retry.py "make -j1 V=s" "image.log" 8
          
      - name: Check for .bin file after initial compilation
        id: check_bin_initial
        run: |
          if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
            echo "BIN_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "BIN_EXISTS=false" >> $GITHUB_OUTPUT
            if [ -d "openwrt/bin/targets" ]; then
              tree openwrt/bin/targets/
            else
              echo "Directory openwrt/bin/targets/ does not exist."
            fi
          fi
      - name: Perform manual porting for Xiaomi Mi Router 4
        id: transplant
        if: steps.check_bin_initial.outputs.BIN_EXISTS == 'false'
        run: |
          cd openwrt
          echo "Performing manual porting for Xiaomi Mi Router 4..."
          # Clone lede-source for necessary files
          git clone https://github.com/coolsnowwolf/lede lede-source
          # Copy DTS file
          cp lede-source/target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts target/linux/ramips/dts/
          # Define mt7621.mk
          cp ../target/linux/ramips/image/mt7621.mk target/linux/ramips/image/mt7621.mk
          # Copy base-files
          cp -r lede-source/target/linux/ramips/mt7621/base-files target/linux/ramips/mt7621/
          rm -rf lede-source
          # Adjust IMAGE_SIZE
          sed -i 's/IMAGE_SIZE := 124416k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
          sed -i 's/IMAGE_SIZE := 16064k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
          # Adjust DTS partition size to 114MB
          sed -i 's/reg = <0x50000 0xfb0000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          sed -i 's/reg = <0x50000 0x1000000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          # Define partitions if not present
          if ! grep -q 'partition@0' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts; then
            echo "分区未定义, 修复中..."
            sed -i '/partitions {/a\
              compatible = "fixed-partitions";\
              #address-cells = <1>;\
              #size-cells = <1>;\
            partition@0 {\
              label = "u-boot";\
              reg = <0x0 0x30000>;\
              read-only;\
            };\
            partition@30000 {\
              label = "u-boot-env";\
              reg = <0x30000 0x10000>;\
              read-only;\
            };\
            factory: partition@40000 {\
              label = "factory";\
              reg = <0x40000 0x10000>;\
              read-only;\
            };\
            partition@50000 {\
              label = "firmware";\
              reg = <0x50000 0x6e00000>;\
            };' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          fi
          # Fix ROOTFS_PARTSIZE
          sed -i 's|ROOTFS_PARTSIZE=$(shell echo \$\$(( $(CONFIG_TARGET_ROOTFS_PARTSIZE) \* 1024 \* 1024 )))|ROOTFS_PARTSIZE=$(shell echo \$\$(( ${CONFIG_TARGET_ROOTFS_PARTSIZE:-110} * 1024 * 1024 )))|' include/image.mk
          echo "isFixed=true" >> $GITHUB_OUTPUT
          
      - name: Compile the firmware with fixes
        id: compile_with_fixes
        if: steps.transplant.outputs.isFixed == 'true'
        run: |
            pwd && ls
            cp compile_with_retry.sh openwrt/ 
            cd openwrt
            # bash compile_with_retry.sh "make -j1 V=s" "compile.log" 6 &&  echo "status=success" >> $GITHUB_OUTPUT
            cp compile_with_retry.py openwrt/ 
            python compile_with_retry.py "make -j1 V=s" "compile.log" 7 &&  echo "status=success" >> $GITHUB_OUTPUT

          
      - name: Set environment variables
        id: setEnv
        if: steps.compile_attempt.outputs.status == 'success' || steps.compile_with_fixes.outputs.status == 'success'
        run: |
          cd openwrt
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
          echo "TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
          echo "TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')" >> $GITHUB_ENV
          echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
          KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Rename
        id: rename
        if: steps.setEnv.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          echo "进入文件夹：$(pwd)"
          for file in openwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.TARGET_PROFILE}}-*; do
            if [ -f "$file" ]; then
              new_file="openwrt_org_${{ env.TARGET_BOARD }}_${{ env.TARGET_SUBTARGET }}_${{ env.TARGET_PROFILE}}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}${file#*${{ env.TARGET_PROFILE }}}"
              mv "$file" "$new_file"
              echo "Renamed $file to $new_file"
            fi
          done
          
      - name: 查看日志结尾200行
        if: always()
        run: |
          cd openwrt      
          if [ "${{ steps.compile_packages.outcome }}" = "failure" ]; then             
            echo "Compile packages failed. Showing last 200 lines of packages.log:" 
            tail -200 packages.log || tail -200 trojanplus.log  
          elif [ "${{ steps.build_image.outcome }}" = "failure" ]; then             
            echo "Build image failed. Showing last 300 lines of image.log:"             
            tail -200 image.log           
          else             
            echo "All steps completed successfully. No log to show."           
          fi 

      - name: Upload bin directory
        uses: actions/upload-artifact@master
        if: steps.rename.conclusion == 'success'
        with:
          name: OpenWrt.org_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: |
            openwrt/bin
            openwrt/.config

      - name: Organize files
        id: organize
        if: steps.rename.conclusion == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "firmware_path=$(pwd)" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt.org_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: ${{ env.firmware_path }}
          
      - name: Check for .bin file after final compilation
        id: check_bin_final
        run: |
          if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
            echo "FINAL_BIN_EXISTS=true" >> $GITHUB_ENV
          else
            echo "FINAL_BIN_EXISTS=false" >> $GITHUB_ENV
          fi


      - name: Generate release tag
        id: generate_release_tag
        if: env.FINAL_BIN_EXISTS == 'true'
        run: |
          echo "release_tag=OpenWRT.org_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "release_tag_status=success" >> $GITHUB_OUTPUT
          echo "release_tag_status: ${{steps.generate_release_tag.outputs.release_tag_status}}"

      - name: Upload firmware to release
        id: up-release
        uses: softprops/action-gh-release@master
        if: steps.generate_release_tag.outputs.release_tag_status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        with:
            token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
            files: |
              ${{ env.firmware_path }}/*
              openwrt/.config
            name: ${{ steps.generate_release_tag.outputs.release_tag }}
            tag_name: ${{ steps.generate_release_tag.outputs.release_tag }}
            
      - name: Delete temporary files from MEGA
        if: steps.up-release.outcome == 'success'  # 仅在上传 Release 成功后执行
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
        run: |
          python -m pip install mega.py  # 安装 mega.py 库
          python -c "
          from mega import Mega
          mega = Mega()
          m = mega.login('$MEGA_USERNAME', '$MEGA_PASSWORD')
          folder = m.find('${{ env.SOURCE }}')  # 假设临时文件在 '${{ env.SOURCE }}' 文件夹中
          if folder:
              m.destroy(folder[0])  # 删除文件夹及其内容
          "
          
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 3
          delete_tag_pattern: .*${{ env.SOURCE }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
