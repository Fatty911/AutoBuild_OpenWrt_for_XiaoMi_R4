name: Simple Build OpenWRT for Xiaomi Mi Router 4 with Custom Packages

on:
  #手动运行
  workflow_dispatch:
  #文件修改时触发
  push:
    branches:
      - main
    # 添加路径过滤，仅当当前工作流文件被修改时触发
    paths:
      - .github/workflows/SimpleBuildOpenWRT_Official.yml  # 需替换为当前工作流文件的实际路径
  repository_dispatch:
    types: Openwrt.org Source Code Update
env:
  TERM: xterm
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
      - name: Checkout Self Repo
        uses: actions/checkout@main
        
          
      - name: Clone OpenWRT.org_Official
        run: |
          git clone http://github.com/openwrt/openwrt openwrt

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential musl-tools libncurses5-dev libncursesw5-dev gawk git libssl-dev gettext zlib1g-dev swig rsync ruby unzip libpam0g-dev libcurl4-openssl-dev libdeflate-dev
          
      - name: Update feeds
        run: |
          cd openwrt
          echo 'src-git passwall https://github.com/xiaorouji/openwrt-passwall' >>feeds.conf.default
          echo 'src-git OpenClash https://github.com/vernesong/OpenClash' >>feeds.conf.default
          echo 'src-git small8 https://github.com/kenzok8/small-package' >>feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp ../config_for_OpenWrt_org .config
          make defconfig
          echo "在defconfig之后查看配置文件"
          cat .config | grep CONFIG_TARGET_.*=y
          
          
      - name: Download package
        id: download_package
        run: |
          cd openwrt
          make download -j2
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;     

      - name: Compile tools
        id: compile_tools
        run: |
          cd openwrt
          make tools/install -j$(nproc) V=s > tools.log 2>&1 || make tools/install -j1 V=s > tools.log 2>&1

      - name: Compile toolchain
        id: compile_toolchain
        run: |
          cd openwrt
          make toolchain/install -j$(nproc) V=s > toolchain.log 2>&1 || make toolchain/install -j1 V=s > toolchain.log 2>&1
          make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j$(nproc) package/luci/modules/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s || make -j1 package/luci/modules/luci-base/compile V=s
          
      - name: Compile kernel
        id: compile_kernel
        run: |
          cd openwrt
          make target/linux/compile -j$(nproc) V=s > kernel.log 2>&1 || make target/linux/compile -j1 V=s > kernel.log 2>&1

      - name: Compile packages
        id: compile_packages
        run: |
          cd openwrt
          cp ../compile_with_retry.sh .
          echo "开始尝试编译packages" 
          make -j1 V=s > packs.log 2>&1 || bash compile_with_retry.sh "make -j1 V=s" "packages.log" 6 "error:|failed|undefined reference" 


      
      - name: Build image
        id: build_image
        run: |
          cd openwrt
          cp ../compile_with_retry.sh .
          LOG_FILE="image.log"
          bash compile_with_retry.sh "make -j1 V=s" "image.log" 6 "error:|failed|undefined reference"

      # - name: Build firmware
      #   id: build
      #   run: |
      #     cd openwrt
      #     make -j$(nproc) toolchain/install  V=s || make -j1 toolchain/install  V=s
      #     make -j$(nproc) tools/install  V=s || make -j1 tools/install  V=s
          
      #     make -j$(nproc) package/feeds/luci/luci-base/compile V=s || make -j$(nproc) package/luci/modules/luci-base/compile V=s || make -j1 package/feeds/luci/luci-base/compile V=s || make -j1 package/luci/modules/luci-base/compile V=s
      #     make -j$(nproc) V=s > compile.log 2>&1|| make -j1 V=s > compile.log 2>&1
        
          
          
      - name: 查看日志结尾300行
        if: always()
        run: |
          cd openwrt
          if [ "${{ steps.compile_tools.outcome }}" = "failure" ]; then             
            echo "Compile tools failed. Showing last 300 lines of tools.log:"             
            tail -300 tools.log           
          elif [ "${{ steps.compile_toolchain.outcome }}" = "failure" ]; then             
            echo "Compile toolchain failed. Showing last 300 lines of toolchain.log:"             
            tail -300 toolchain.log           
          elif [ "${{ steps.compile_kernel.outcome }}" = "failure" ]; then             
            echo "Compile kernel failed. Showing last 300 lines of kernel.log:"             
            tail -300 kernel.log           
          elif [ "${{ steps.compile_packages.outcome }}" = "failure" ]; then             
            echo "Compile packages failed. Showing last 300 lines of packages.log:"             
            tail -300 packages.log     
            echo "编译packages失败，查看日志结尾"
            tail -300 packs.log    
          elif [ "${{ steps.build_image.outcome }}" = "failure" ]; then             
            echo "Build image failed. Showing last 300 lines of image.log:"             
            tail -300 image.log           
          else             
            echo "All steps completed successfully. No log to show."           
          fi 


      - name: Upload firmware
        if: steps.build.conclusion == 'success'
        uses: actions/upload-artifact@master
        with:
          name: openwrt-firmware
          path: openwrt/bin/targets/ramips/mt7621/*
          
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
