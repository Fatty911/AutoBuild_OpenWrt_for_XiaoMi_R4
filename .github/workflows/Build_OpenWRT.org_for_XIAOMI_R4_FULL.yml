name: Build OpenWRT.org for XIAOMI_R4 FULL

on:
  repository_dispatch:
    types: Openwrt.org Source Code Update
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  push:
    branches: 
      - master

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_OpenWrt_org
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 10240
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
            
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* 
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list || true
          sudo -E apt-get -qq update
          sudo apt install software-properties-common -y || true
          sudo add-apt-repository universe || true
          sudo add-apt-repository multiverse || true
          sudo apt update
          sudo apt install -y build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-distutils rsync bc wget ccache || sudo apt install -y build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-venv python3-pip rsync bc wget ccache || sudo apt policy build-essential git gettext subversion ccache python3-distutils
          #sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir/openwrt

      - name: Clone source code
        working-directory: ${{ github.workspace }}
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds and Install feeds
        run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

      # - name: Patch luci-lib-taskd Makefile
      #   run: |
      #     cd openwrt/feeds/small8/luci-lib-taskd
      #     sed -i 's/DEPENDS:=.*$/DEPENDS:=+taskd +libc +luci-lib-xterm +luci-lua-runtime/' Makefile
      # #     cat Makefile  # Debug: Show the modified Makefile
      
      - name: Fix Makefile package version formats 
        run: |
          cd openwrt
          # 处理 PKG_VERSION:=a.b.c-d 的情况
          echo "Checking for PKG_VERSION with hyphen..."
          find . -name "Makefile" | while read -r makefile; do
            if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
              echo "Found target in $makefile"
              sed -i -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
              echo "Modified $makefile:"
              grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
            fi
          done
           # 处理 DEPENDS、EXTRA_DEPENDS、LUCI_DEPENDS、LUCI_EXTRA_DEPENDS 中的版本约束
          echo "Checking for DEPENDS with version constraints..."
          find . -name "Makefile" | while read -r makefile; do
            if grep -q -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):.*\+[^[:space:]]\+>=[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?" "$makefile"; then
              echo "Found DEPENDS target in $makefile"
              sed -i -E 's/(\+[a-zA-Z0-9_-]+)(>=[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?)/\1/g' "$makefile"
              echo "Modified $makefile (DEPENDS):"
              grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile"
            fi
          done
           # 强制修复 luci-lib-taskd 的 DEPENDS 并清理重复
          luci_lib_taskd_makefile="feeds/small8/luci-lib-taskd/Makefile"
          if [ -f "$luci_lib_taskd_makefile" ]; then
            echo "Forcing fix on $luci_lib_taskd_makefile"
            sed -i 's/LUCI_DEPENDS:=.*$/LUCI_DEPENDS:=+taskd +libc +luci-lib-xterm +luci-lua-runtime/' "$luci_lib_taskd_makefile"
            sed -i 's/LUCI_EXTRA_DEPENDS:=.*$/LUCI_EXTRA_DEPENDS:=/' "$luci_lib_taskd_makefile"
            echo "Final $luci_lib_taskd_makefile (DEPENDS):"
            grep -E "(LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$luci_lib_taskd_makefile"
          fi
          echo "All Makefiles processed."
          
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "Before defconfig, setting CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config
          make defconfig
          echo "After defconfig, checking CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Lost after defconfig, reapplying..." && echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config)
          echo "Final check after reapplication:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config
      - name: Checking .config After diy-part2.sh
        run: |
          cd openwrt
          echo "After diy-part2.sh, checking .config:"
          #grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Not found, exit" && exit 1)
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "Not found, exit But continuing..."
          
      # - name: Clean and compile luci-lib-taskd
      #   run: |
      #     cd openwrt
      #     make package/feeds/small8/luci-lib-taskd/clean
      #     make package/feeds/small8/luci-lib-taskd/compile V=s || (cat feeds/small8/luci-lib-taskd/Makefile && exit 1)
      # - name: Clean build cache
      #   run: |
      #     cd openwrt
      #     make dirclean
  
      - name: Download package
        id: package
        run: |
          cd openwrt
          #make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check space usage after download
        if: (!cancelled())
        run: df -hT

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      - name: Setup and Build OpenWrt for Xiaomi Mi Router 4
        run: |
          cd openwrt
          
          # Clone the lede-source repository
          git clone https://github.com/coolsnowwolf/lede lede-source
          
          # Copy DTS file for Xiaomi Mi Router 4
          cp lede-source/target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts target/linux/ramips/dts/
          
          # Define corrected mt7621.mk
          tee target/linux/ramips/image/mt7621.mk <<'EOF'
          # MT7621 Profiles
          DEFAULT_SOC := mt7621
          define Image/Prepare
            rm -f $$(KDIR)/ubi_mark
            echo -ne '\xde\xad\xc0\xde' > $$(KDIR)/ubi_mark
          endef 
          define Device/nand
            $$(Device/dsa-migration)
            BLOCKSIZE := 128k
            KERNEL_SIZE := 4096k
            PAGESIZE := 2048
            UBINIZE_OPTS := -E 5
            IMAGE/sysupgrade.bin := sysupgrade-tar | append-metadata
          endef
          define Device/xiaomi_nand_separate
            $$(Device/nand)
            $$(Device/uimage-lzma)
            DEVICE_VENDOR := Xiaomi
            IMAGES += kernel1.bin rootfs0.bin
            image_kernel1.bin := append-kernel
            image_rootfs0.bin := append-ubi | check-size
          endef
          define Device/xiaomi_mi-router-4
            $$(Device/xiaomi_nand_separate)
            DEVICE_NAME := Mi Router 4
            IMAGE_SIZE := 111279k
            DEVICE_PACKAGES := kmod-mt7603 kmod-mt76x2 kmod-usb3
          endef
          TARGET_DEVICES += xiaomi_mi-router-4
          EOF
          # Copy base-files
          cp -r lede-source/target/linux/ramips/mt7621/base-files target/linux/ramips/mt7621/
          
          # Remove cloned repository to save space
          rm -rf lede-source
          
          # Modify IMAGE_SIZE to 111279k in mt7621.mk
          sed -i 's/IMAGE_SIZE := 124416k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
          sed -i 's/IMAGE_SIZE := 16064k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
          
          # Adjust DTS partition size to 114MB (0x6e00000) for firmware
          sed -i 's/reg = <0x50000 0xfb0000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          sed -i 's/reg = <0x50000 0x1000000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          
          # Check and define partitions in DTS if not present
          if ! grep -q 'partition@0' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts; then
            echo "❌ Partition not defined, fixing..."
            sed -i '/partitions {/a\
              compatible = "fixed-partitions";\
              #address-cells = <1>;\
              #size-cells = <1>;\
            partition@0 {\
              label = "u-boot";\
              reg = <0x0 0x30000>;\
              read-only;\
            };\
            partition@30000 {\
              label = "u-boot-env";\
              reg = <0x30000 0x10000>;\
              read-only;\
            };\
            factory: partition@40000 {\
              label = "factory";\
              reg = <0x40000 0x10000>;\
              read-only;\
            };\
            partition@50000 {\
              label = "firmware";\
              reg = <0x50000 0x6e00000>;\
            };' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          else
            echo "✅ Partition definition exists"
          fi
          
          # Fix ROOTFS_PARTSIZE in include/image.mk to 110MB
          sed -i 's|ROOTFS_PARTSIZE=$(shell echo \$\$(( $(CONFIG_TARGET_ROOTFS_PARTSIZE) \* 1024 \* 1024 )))|ROOTFS_PARTSIZE=$(shell echo \$\$(( ${CONFIG_TARGET_ROOTFS_PARTSIZE:-110} * 1024 * 1024 )))|' include/image.mk
          
          # Verify modifications
          echo "Checking device definition in mt7621.mk:"
          grep -A10 "define Device/xiaomi_mi-router-4" target/linux/ramips/image/mt7621.mk
          echo "Checking DTS file:"
          cat target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          echo "Checking CONFIG_TARGET_ROOTFS_PARTSIZE in .config:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "Not found in .config"
      - name: Debug Makefile Contents
        run: |
          cd openwrt
          echo "Contents of target/linux/ramips/image/Makefile:"
          cat target/linux/ramips/image/Makefile || echo "File not found"
          echo "Contents of target/linux/ramips/image/mt7621.mk:"
          cat target/linux/ramips/image/mt7621.mk
          echo "Searching for 'image-prereq' in target/linux:"
          grep -r "image-prereq" target/linux/ || echo "Not found in target/linux"
          echo "Searching for 'image-prereq' in include:"
          grep -r "image-prereq" include/ || echo "Not found in include"
      - name: Clean build cache
        run: |
          cd openwrt
          make package/feeds/small8/luci-app-store/clean
          make package/feeds/small8/luci-lib-taskd/clean
          make package/feeds/small8/luci-app-istorex/clean  
      - name: Fix luci-app-store version and clean cache
        run: |
          cd openwrt
          # 强制修复 luci-app-store Makefile
          if grep -q "PKG_VERSION:=0.1.27-4" feeds/small8/luci-app-store/Makefile; then
            sed -i 's/PKG_VERSION:=0.1.27-4/PKG_VERSION:=0.1.27\nPKG_RELEASE:=4/' feeds/small8/luci-app-store/Makefile
            echo "Fixed luci-app-store Makefile:"
            grep -E "PKG_VERSION|PKG_RELEASE" feeds/small8/luci-app-store/Makefile
          fi
          # 清理缓存
          make package/feeds/small8/luci-app-store/clean
          # 修补 apk mkpkg 调用
          PKG_VERSION=$(grep "PKG_VERSION:=" feeds/small8/luci-app-store/Makefile | cut -d'=' -f2)
          sed -i "s/--info \"version:0.1.27-4\"/--info \"version:${PKG_VERSION}\"/" feeds/luci/luci.mk
          echo "Patched luci.mk with version: ${PKG_VERSION}"
      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')
          echo "检测TARGET_BOARD是否在.config中成功找到：$TARGET_BOARD"
          echo "TARGET_BOARD=$TARGET_BOARD" >> $GITHUB_ENV
          TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')
          echo "检测TARGET_SUBTARGET是否在.config中成功找到：$TARGET_SUBTARGET"
          echo "TARGET_SUBTARGET=$TARGET_SUBTARGET" >> $GITHUB_ENV
          TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')
          echo "检测TARGET_PROFILE是否在.config中成功找到：$TARGET_PROFILE"
          echo "TARGET_PROFILE=$TARGET_PROFILE" >> $GITHUB_ENV
          echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
          
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j$(nproc) V=Sc || make -j1 V=s 
          #&& df -hT || sed -i 's/--set=llvm.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/g' $GITHUB_WORKSPACE/openwrt/feeds/packages/lang/python/python3/Makefile
          echo "status=success" >> $GITHUB_OUTPUT
          
          KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
          echo "检查是否获取到内核版本号：$KERNEL_VERSION"
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV
          
      - name: Rename
        run: |
          cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          echo "进入文件夹：$(pwd)"
          for file in openwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.TARGET_PROFILE}}-*; do
            if [ -f "$file" ]; then
              new_file="openwrt_org_${{ env.TARGET_BOARD }}_${{ env.TARGET_SUBTARGET }}_${{ env.TARGET_PROFILE}}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}${file#*${{ env.TARGET_PROFILE }}}"
              mv "$file" "$new_file"
              echo "Renamed $file to $new_file"
            fi
          done

      - name: Check space usage after compile
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt.org_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: |
            openwrt/bin
            openwrt/.config

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "firmware_path=$(pwd)" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.organize.status == 'success' && !cancelled()
        with:
          name: OpenWrt.org_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: ${{ env.firmware_path }}
          
      - name: Check for .bin files
        id: check_bin
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          if ! ls ${{ env.firmware_path }}/*.bin 1> /dev/null 2>&1; then
            echo "No .bin files found in firmware_path. Stopping workflow."
            exit 1
          fi


      - name: Generate release tag
        id: generate_release_tag
        if: steps.organize.check_bin.conclusion == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=OpenWRT.org_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "release_tag_status=success" >> $GITHUB_OUTPUT
          echo "release_tag_status: ${{steps.generate_release_tag.outputs.release_tag_status}}"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.generate_release_tag.outputs.release_tag_status == 'success' && env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        with:
            token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
            files: |
              ${{ env.firmware_path }}/*
              openwrt/.config
            name: ${{ steps.generate_release_tag.outputs.release_tag }}
            tag_name: ${{ steps.generate_release_tag.outputs.release_tag }}

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 10
          keep_minimum_runs: 2

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tag_pattern: OpenWRT.org_*
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
