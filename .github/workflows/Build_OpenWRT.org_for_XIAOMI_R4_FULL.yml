name: Build OpenWRT.org for XIAOMI_R4 FULL

on:
  repository_dispatch:
    types: Openwrt.org Source Code Update
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  push:
    branches: 
      - master

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_OpenWrt_org
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 10240
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
            
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc* llvm* 
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list || true
          sudo -E apt-get -qq update
          sudo apt install software-properties-common -y || true
          sudo add-apt-repository universe || true
          sudo add-apt-repository multiverse || true
          sudo apt update
          sudo apt install -y perl build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-distutils rsync bc wget ccache flex bison libelf-dev || sudo apt install -y flex bison libelf-dev build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-venv python3-pip rsync bc wget ccache perl || sudo apt policy build-essential git gettext subversion ccache python3-distutils
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir/openwrt

      - name: Clone source code
        working-directory: ${{ github.workspace }}
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds and Install feeds
        run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

      
          
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "Before defconfig, setting CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config
          make defconfig
          echo "After defconfig, checking CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Lost after defconfig, reapplying..." && echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config)
          echo "Final check after reapplication:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config
      - name: Checking .config After diy-part2.sh
        run: |
          cd openwrt
          echo "After diy-part2.sh, checking .config:"
          #grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Not found, exit" && exit 1)
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "Not found, exit But continuing..."
          
      - name: Download package
        id: package
        run: |
          cd openwrt
          #make defconfig
          make download -j4
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check space usage after download
        if: (!cancelled())
        run: df -hT
        
      - name: Try compiling the firmware
        id: compile_attempt
        run: |
          cd openwrt
          echo "Trying to compile the firmware..."
          # 先编译工具链和 luci-base，避免常见错误
          make tools/compile -j$(nproc) V=s || make tools/compile -j1 V=s
          make toolchain/compile -j$(nproc) V=s || make toolchain/compile -j1 V=s 
          make package/feeds/luci/luci-base/compile -j$(nproc) V=s || make package/feeds/luci/luci-base/compile -j1 V=s
          # 尝试直接编译
          make -j$(nproc) V=s > compile.log 2>&1 || true
          if [ -f "bin/targets/*/*/*.bin" ]; then
            echo "Bin file found, compilation successful."
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No bin file found or compilation failed, checking logs..."
            echo "status=needs_fix" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for .bin file after initial compilation
        id: check_bin_initial
        run: |
          if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
            echo "BIN_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "BIN_EXISTS=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Perform manual porting for Xiaomi Mi Router 4
        id: transplant
        if: steps.compile_attempt.outputs.status == 'needs_fix' && steps.check_bin_initial.outputs.BIN_EXISTS == 'false'
        run: |
          cd openwrt
          echo "Performing manual porting for Xiaomi Mi Router 4..."
          # Clone lede-source for necessary files
          git clone https://github.com/coolsnowwolf/lede lede-source
          # Copy DTS file
          cp lede-source/target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts target/linux/ramips/dts/
          # Define mt7621.mk
          tee target/linux/ramips/image/mt7621.mk <<'EOF'
          DEFAULT_SOC := mt7621
          define Image/Prepare
            rm -f $$(KDIR)/ubi_mark
            echo -ne '\xde\xad\xc0\xde' > $$(KDIR)/ubi_mark
          endef
          define Device/nand
            $$(Device/dsa-migration)
            BLOCKSIZE := 128k
            KERNEL_SIZE := 4096k
            PAGESIZE := 2048
            UBINIZE_OPTS := -E 5
            IMAGE/sysupgrade.bin := sysupgrade-tar | append-metadata
          endef
          define Device/xiaomi_nand_separate
            $$(Device/nand)
            $$(Device/uimage-lzma)
            DEVICE_VENDOR := Xiaomi
            IMAGES += kernel1.bin rootfs0.bin
            image_kernel1.bin := append-kernel
            image_rootfs0.bin := append-ubi | check-size
          endef
          define Device/xiaomi_mi-router-4
            $(Device/nand)
            $(Device/uimage-lzma)
            DEVICE_VENDOR := Xiaomi
            DEVICE_MODEL := Mi Router 4
            DEVICE_DTS := mt7621_xiaomi_mi-router-4
            IMAGE_SIZE := 111279k
            DEVICE_PACKAGES := kmod-mt7603 kmod-mt76x2 kmod-usb3
            IMAGES += kernel1.bin rootfs0.bin
            IMAGE/kernel1.bin := append-kernel
            IMAGE/rootfs0.bin := append-ubi | check-size
          endef
          TARGET_DEVICES += xiaomi_mi-router-4
          EOF
          # Copy base-files
          cp -r lede-source/target/linux/ramips/mt7621/base-files target/linux/ramips/mt7621/
          rm -rf lede-source
          # Adjust IMAGE_SIZE
          sed -i 's/IMAGE_SIZE := 124416k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
          sed -i 's/IMAGE_SIZE := 16064k/IMAGE_SIZE := 111279k/g' target/linux/ramips/image/mt7621.mk
          # Adjust DTS partition size to 114MB
          sed -i 's/reg = <0x50000 0xfb0000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          sed -i 's/reg = <0x50000 0x1000000>/reg = <0x50000 0x6e00000>/g' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          # Define partitions if not present
          if ! grep -q 'partition@0' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts; then
            echo "Partition not defined, fixing..."
            sed -i '/partitions {/a\
              compatible = "fixed-partitions";\
              #address-cells = <1>;\
              #size-cells = <1>;\
            partition@0 {\
              label = "u-boot";\
              reg = <0x0 0x30000>;\
              read-only;\
            };\
            partition@30000 {\
              label = "u-boot-env";\
              reg = <0x30000 0x10000>;\
              read-only;\
            };\
            factory: partition@40000 {\
              label = "factory";\
              reg = <0x40000 0x10000>;\
              read-only;\
            };\
            partition@50000 {\
              label = "firmware";\
              reg = <0x50000 0x6e00000>;\
            };' target/linux/ramips/dts/mt7621_xiaomi_mi-router-4.dts
          fi
          # Fix ROOTFS_PARTSIZE
          sed -i 's|ROOTFS_PARTSIZE=$(shell echo \$\$(( $(CONFIG_TARGET_ROOTFS_PARTSIZE) \* 1024 \* 1024 )))|ROOTFS_PARTSIZE=$(shell echo \$\$(( ${CONFIG_TARGET_ROOTFS_PARTSIZE:-110} * 1024 * 1024 )))|' include/image.mk
          echo "isFixed=true" >> $GITHUB_OUTPUT
          
      - name: Compile the firmware with fixes
        id: compile_with_fixes
        if: steps.transplant.outputs.isFixed == 'true'
        run: |
          cd openwrt
          # 检查 PKG_VERSION 错误
          if grep -q "PKG_VERSION" compile.log; then
            echo "Fixing PKG_VERSION formats..."
            find . -type f \( -name "Makefile" -o -name "*.mk" \) | while read -r makefile; do
              if grep -q "PKG_VERSION:=.*\..*\..*-[0-9]\+" "$makefile" && ! grep -q "PKG_RELEASE:=" "$makefile"; then
                echo "Found target in $makefile"
                sed -i.bak -E 's/PKG_VERSION:=([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/PKG_VERSION:=\1\nPKG_RELEASE:=\2/' "$makefile"
                echo "Modified $makefile:"
                grep -E "PKG_VERSION|PKG_RELEASE" "$makefile"
              fi
            done
          fi
          # 检查依赖项重复错误
          if grep -q "DEPENDS" compile.log; then
            echo "Fixing dependency duplicates..."
            find . -type f \( -name "Makefile" -o -name "*.mk" \) -exec sh -c '
              makefile="$1"
              awk '\''BEGIN { FS = "[[:space:]]+" }
              /^[[:space:]]*(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=/ {
                  split($0, deps, " ")
                  seen_versioned = ""
                  seen_bare = ""
                  result = $1
                  for (i = 2; i <= length(deps); i++) {
                      dep = deps[i]
                      pos = index(dep, ">=")
                      if (pos > 0) {
                          bare = substr(dep, 2, pos-2)
                      } else {
                          bare = substr(dep, 2)
                      }
                      if (match(dep, />=/)) {
                          if (seen_versioned !~ bare) {
                              result = result " " dep
                              seen_versioned = seen_versioned " " bare
                              gsub(" *" bare " *", " ", seen_bare)
                          }
                      } else {
                          if (seen_versioned !~ bare && seen_bare !~ bare) {
                              result = result " " dep
                              seen_bare = seen_bare " " bare
                          }
                      }
                  }
                  print result
                  next
              }
              { print }
              '\'' "$makefile" > "$makefile.tmp"
              if [ -s "$makefile.tmp" ] && ! cmp -s "$makefile" "$makefile.tmp"; then
                echo "Modified $makefile:"
                grep -E "(DEPENDS|EXTRA_DEPENDS|LUCI_DEPENDS|LUCI_EXTRA_DEPENDS):=" "$makefile.tmp"
                mv "$makefile.tmp" "$makefile"
              else
                rm -f "$makefile.tmp"
              fi
            ' _ {} \;
          fi
          # 编译固件
          # make -j$(nproc) V=s || make -j1 V=s || exit 1
          make -j1 V=s || exit 1
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Set environment variables
        id: setEnv
        if: steps.compile_attempt.outputs.status == 'success' || steps.compile_with_fixes.outputs.status == 'success'
        run: |
          cd openwrt
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "TARGET_BOARD=$(grep '^CONFIG_TARGET_BOARD=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
          echo "TARGET_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV
          echo "TARGET_PROFILE=$(grep '^CONFIG_TARGET_PROFILE=' .config | sed -r 's/.*="(.*)"/\1/' | sed 's/^DEVICE_//')" >> $GITHUB_ENV
          echo "DEVICE_NAME=$TARGET_PROFILE" >> $GITHUB_ENV
          KERNEL_VERSION=$(ls build_dir/target-*_*/linux-*/ | grep -oP 'linux-\K\d+\.\d+\.\d+')
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Rename
        id: rename
        if: steps.setEnv.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/${{ env.TARGET_BOARD }}/${{ env.TARGET_SUBTARGET }}
          echo "进入文件夹：$(pwd)"
          for file in openwrt-${{ env.TARGET_BOARD }}-${{ env.TARGET_SUBTARGET }}-${{ env.TARGET_PROFILE}}-*; do
            if [ -f "$file" ]; then
              new_file="openwrt_org_${{ env.TARGET_BOARD }}_${{ env.TARGET_SUBTARGET }}_${{ env.TARGET_PROFILE}}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}${file#*${{ env.TARGET_PROFILE }}}"
              mv "$file" "$new_file"
              echo "Renamed $file to $new_file"
            fi
          done

      - name: Check space usage after compile
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@master
        if: steps.rename.conclusion == 'success'
        with:
          name: OpenWrt.org_bin_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: |
            openwrt/bin
            openwrt/.config

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "firmware_path=$(pwd)" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt.org_firmware_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_${{ env.FILE_DATE }}
          path: ${{ env.firmware_path }}
          
      - name: Check for .bin file after final compilation
        id: check_bin_final
        run: |
          if [ -f "openwrt/bin/targets/*/*/*.bin" ]; then
            echo "FINAL_BIN_EXISTS=true" >> $GITHUB_ENV
          else
            echo "FINAL_BIN_EXISTS=false" >> $GITHUB_ENV
          fi


      - name: Generate release tag
        id: generate_release_tag
        #if: steps.check_bin.conclusion == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        if: env.FINAL_BIN_EXISTS == 'true' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=OpenWRT.org_${{ env.DEVICE_NAME }}_Kernel_${{ env.kernel_version }}_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "release_tag_status=success" >> $GITHUB_OUTPUT
          echo "release_tag_status: ${{steps.generate_release_tag.outputs.release_tag_status}}"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.generate_release_tag.outputs.release_tag_status == 'success' && env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        with:
            token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
            files: |
              ${{ env.firmware_path }}/*
              openwrt/.config
            name: ${{ steps.generate_release_tag.outputs.release_tag }}
            tag_name: ${{ steps.generate_release_tag.outputs.release_tag }}

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 10
          keep_minimum_runs: 2

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tag_pattern: OpenWRT.org_*
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
