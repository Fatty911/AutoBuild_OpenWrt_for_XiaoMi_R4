name: Simple 1 Build OpenWRT.org 1 before transplant for XIAOMI_R4

on:
  repository_dispatch:
    types: Openwrt.org Source Code Update
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: true
        default: false
  push:
    branches: 
      - master
      - main
    paths:
      - .github/workflows/Simple1.yml

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config_for_OpenWrt_org
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  SOURCE: OpenWrt.org_official

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 10240
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
            
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('/etc/apt/sources.list') }}-${{ hashFiles('**/Breaks') }} # Added Breaks file for more robustness
          restore-keys: |
            ${{ runner.os }}-apt-
            
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli* docker* ghc*  
          sudo sed -i 's/^# deb/deb/g' /etc/apt/sources.list || true
          #sudo -E apt-get -qq update
          sudo apt update
          sudo apt -y install software-properties-common 
          sudo add-apt-repository universe || true
          sudo add-apt-repository multiverse || true
          sudo add-apt-repository ppa:git-core/ppa 
          sudo apt update
          sudo apt install -y perl build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-distutils rsync bc wget ccache flex bison libelf-dev || sudo apt install -y flex bison libelf-dev build-essential libncurses5-dev gawk git subversion libssl-dev gettext unzip zlib1g-dev file python3 python3-venv python3-pip rsync bc wget ccache perl || sudo apt policy build-essential git gettext subversion ccache python3-distutils
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir/openwrt
          sudo chown -R $USER:$GROUPS /workdir/openwrt
          sudo apt install -y jq parallel python3-pip pigz
          pip install mega.py || pip3 install mega.py || exit 1
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV


      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE, env.DIY_P1_SH, env.DIY_P2_SH) }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ env.REPO_BRANCH }}-

            
      - name: Clone source code
        working-directory: ${{ github.workspace }}
        run: |
          df -hT $PWD
          sudo apt -y install git
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds and Install feeds
        run: |
          cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a
          
          echo "移除相关组件对trojan-plus的依赖"
          # Ensure these paths are correct relative to the current directory (openwrt)
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              feeds/passwall/luci-app-passwall/Makefile || true
          
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              package/feeds/passwall/luci-app-passwall/Makefile || true # Covers case where feeds are symlinked
              
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              feeds/small8/luci-app-passwall/Makefile || true
          sed -i \
              -e '/select PACKAGE_trojan-plus/d' \
              -e '/config PACKAGE_.*_INCLUDE_Trojan_Plus/,/default /s/default y/default n/' \
              package/feeds/small8/luci-app-passwall/Makefile || true # Covers case where feeds are symlinked
          echo "彻底移除 trojan-plus 包"
          rm -rf feeds/small8/trojan-plus
          rm -rf package/feeds/small8/trojan-plus # 确保两个位置都删除

  
      - name: Cache OpenWRT dl directory
        uses: actions/cache@v4
        id: cache-dl
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-dl-${{ env.REPO_BRANCH }}-${{ hashFiles('openwrt/feeds.conf.default', env.CONFIG_FILE, env.DIY_P1_SH) }}
          restore-keys: |
            ${{ runner.os }}-dl-${{ env.REPO_BRANCH }}-    
          
      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "Before defconfig, setting CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config
          make defconfig
          echo "After defconfig, checking CONFIG_TARGET_ROOTFS_PARTSIZE:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Lost after defconfig, reapplying..." && echo "CONFIG_TARGET_ROOTFS_PARTSIZE=110" >> .config)
          echo "Final check after reapplication:"
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config


      - name: Cache OpenWRT build directories (staging_dir, build_dir)
        uses: actions/cache@v4
        id: cache-build
        with:
          path: |
            openwrt/staging_dir
            openwrt/build_dir
            openwrt/tmp # Caching tmp can sometimes help, but can also lead to issues. Monitor.
          key: ${{ runner.os }}-build-${{ env.REPO_BRANCH }}-${{ hashFiles('openwrt/.config', env.DIY_P1_SH, env.DIY_P2_SH) }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.REPO_BRANCH }}-


      
      - name: Checking files After diy-part2.sh
        run: |
          cd openwrt
          echo "After diy-part2.sh, checking .config:"
          #grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || (echo "Not found, exit" && exit 1)
          grep "CONFIG_TARGET_ROOTFS_PARTSIZE" .config || echo "Not found, exit But continuing..."
          echo "ls -la查看目录"
          ls -la
          sed -i 's/--set=llvm.download-ci-llvm=true/--set=llvm.download-ci-llvm=false/g' feeds/packages/lang/rust/Makefile 
          cp ../fix_makefile_metadata.py . && python3 ./fix_makefile_metadata.py --all
          
      - name: Download package
        id: download_package
        run: |
          cd openwrt
          make download -j4
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Check space usage after download
        if: (!cancelled())
        run: df -hT
        

      - name: Compile 1
        id: compile_1
        run: |
          cd openwrt
          make tools/install -j2 V=s || make tools/install -j1 V=s
    
      - name: Compile 2
        id: compile_2
        run: |
          cd openwrt
          make toolchain/install -j2 V=s || make toolchain/install -j1 V=s 

      - name: Compile 3
        id: compile_3
        run: |
          cd openwrt
          make target/linux/compile -j2 V=s || make target/linux/compile -j1 V=s 
 
      - name: Compile 4
        id: compile_4
        run: |
          cd openwrt

          make package/compile V=s -j2 || make package/compile V=s -j1 || make V=s -j2 || make V=s -j1 || true
          
      - name: Compile 5
        id: compile_5
        run: |
          cd openwrt

          make V=s -j2 || make V=s -j1 || true
      
      
     
      - name: 归档
        run: |
          echo "压缩前先看一下目录结构"
          ls -la openwrt
          tar -cf - openwrt | pigz > ${{ env.SOURCE }}.tar.gz
          #tar -czf ${{ env.SOURCE }}.tar.gz openwrt 
          
          
      - name: Upload to MEGA
        env:
          MEGA_USERNAME: ${{ secrets.MEGA_USERNAME }}  # 从 Secrets 中获取用户名
          MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}  # 从 Secrets 中获取密码
        run: |
          python upload_to_MEGA.py
         
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
